# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QT_Files/GUI_FFT_LSTM_Stock.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#### Glossary ###
#SLCT_all: select all

import sys
sys.path.append("APP/Pakages/DataSetgenPacks")
sys.path.append("APP/Pakages/ForcastingPacks")
sys.path.append("APP/Pakages/Seed_Model")

#from Trainer_Predicting_Esamble import Model_Trainer
#from Forcaster_Model import Forcast_Data
#from Forcaster_Model_DateFromToForcast import Forcast_Data
import matplotlib.pyplot as plt

### Check if model is created
import os.path as path
import os 


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3

import pandas as pd
import numpy as np

from Model_Trainner import DL_Trainner
from Model_Creator import DL_Model
from DataSet_Creator import DL_DataSet
from Model_Forcast import DL_Forcast
from Eval_Forcast import DL_Evaluator


#To see easy the db file is to drag bdfiel into:  https://inloop.github.io/sqlite-viewer/
#or by using the command c.execute('SELECT * FROM estudiantes")
#print (c.fetchall()) a list is generated


class Ui_GUI_LSTM_FORCASTER(object):
    def __init__(self):
        #### PathFiles  ####
        self.InstallerVersionActive=False
        ####  App Instances 
        #Opening connection
        if self.InstallerVersionActive:
            self.Forcaster_DB_conn=sqlite3.connect('dist/GUI_FFT_LSTM_Stock/DataStructures/Predict_model.db')
        else:
            self.Forcaster_DB_conn=sqlite3.connect('APP/DataStructures/Predict_model.db')
        #Create cursor
        self.Forcaster_DB_c = self.Forcaster_DB_conn.cursor()
        
        ### Classes 
        # Trainnign room
        self.trainner = DL_Trainner()
        # Model Creator
        self.model_creator = DL_Model() 
        # DataSet creator
        self.DataSet_creator = DL_DataSet() 
        # Model forcaster
        self.Forcaster = DL_Forcast()
        
        # Evaluation forcast
        self.Evaluator = DL_Evaluator()
        
        
        
        ## global var init
        
        self.GetSeedDataModel()

        self.GetModelTable()
                
        self.GetSeed_DataSet()
        
        self.GetDataSetTable()
        
        
    
    def setupUi(self, GUI_LSTM_FORCASTER):
        GUI_LSTM_FORCASTER.setObjectName("GUI_LSTM_FORCASTER")
        GUI_LSTM_FORCASTER.resize(700, 446)
        self.centralwidget = QtWidgets.QWidget(GUI_LSTM_FORCASTER)
        self.centralwidget.setObjectName("centralwidget")
        self.Tabs = QtWidgets.QTabWidget(self.centralwidget)
        self.Tabs.setGeometry(QtCore.QRect(10, 0, 681, 421))
        self.Tabs.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Tabs.setTabPosition(QtWidgets.QTabWidget.North)
        self.Tabs.setMovable(False)
        self.Tabs.setTabBarAutoHide(False)
        self.Tabs.setObjectName("Tabs")
        
        self.ForcastEval_Tab = QtWidgets.QWidget()
        self.ForcastEval_Tab.setObjectName("ForcastEval_Tab")
        self.ForcastEval_lbl_ChooseModel = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_ChooseModel.setGeometry(QtCore.QRect(30, 80, 161, 20))
        self.ForcastEval_lbl_ChooseModel.setObjectName("ForcastEval_lbl_ChooseModel")
        self.ForcastEval_btn_EvaluateFor = QtWidgets.QPushButton(self.ForcastEval_Tab)
        self.ForcastEval_btn_EvaluateFor.setGeometry(QtCore.QRect(430, 30, 131, 71))
        self.ForcastEval_btn_EvaluateFor.setObjectName("ForcastEval_btn_EvaluateFor")
        self.ForcastEval_Combox_ChooseModel = QtWidgets.QComboBox(self.ForcastEval_Tab)
        self.ForcastEval_Combox_ChooseModel.setGeometry(QtCore.QRect(30, 100, 171, 26))
        self.ForcastEval_Combox_ChooseModel.setObjectName("ForcastEval_Combox_ChooseModel")
        self.ForcastEval_txtLine_ShowShape = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_ShowShape.setGeometry(QtCore.QRect(230, 170, 141, 21))
        self.ForcastEval_txtLine_ShowShape.setObjectName("ForcastEval_txtLine_ShowShape")
        self.ForcastEval_lbl_Chooseitem = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_Chooseitem.setGeometry(QtCore.QRect(30, 10, 161, 20))
        self.ForcastEval_lbl_Chooseitem.setObjectName("ForcastEval_lbl_Chooseitem")
        self.ForcastEval_Combox_ChooseItem = QtWidgets.QComboBox(self.ForcastEval_Tab)
        self.ForcastEval_Combox_ChooseItem.setGeometry(QtCore.QRect(30, 30, 171, 26))
        self.ForcastEval_Combox_ChooseItem.setObjectName("ForcastEval_Combox_ChooseItem")
        self.ForcastEval_lbl_ShowShape = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_ShowShape.setGeometry(QtCore.QRect(230, 150, 131, 16))
        self.ForcastEval_lbl_ShowShape.setObjectName("ForcastEval_lbl_ShowShape")
        self.ForcastEval_Combox_Chooseforcast = QtWidgets.QComboBox(self.ForcastEval_Tab)
        self.ForcastEval_Combox_Chooseforcast.setGeometry(QtCore.QRect(30, 170, 171, 26))
        self.ForcastEval_Combox_Chooseforcast.setObjectName("ForcastEval_Combox_Chooseforcast")
        self.ForcastEval_lbl_ChooseForcast = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_ChooseForcast.setGeometry(QtCore.QRect(30, 150, 161, 20))
        self.ForcastEval_lbl_ChooseForcast.setObjectName("ForcastEval_lbl_ChooseForcast")
        self.ForcastEval_btn_DeleteFor = QtWidgets.QPushButton(self.ForcastEval_Tab)
        self.ForcastEval_btn_DeleteFor.setGeometry(QtCore.QRect(430, 110, 131, 71))
        self.ForcastEval_btn_DeleteFor.setObjectName("ForcastEval_btn_DeleteFor")
        self.ForcastEval_txtLine_RowsConsidered = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_RowsConsidered.setGeometry(QtCore.QRect(10, 340, 141, 21))
        self.ForcastEval_txtLine_RowsConsidered.setObjectName("ForcastEval_txtLine_RowsConsidered")
        self.ForcastEval_txtLine_TotalDiffLose = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_TotalDiffLose.setGeometry(QtCore.QRect(180, 290, 141, 21))
        self.ForcastEval_txtLine_TotalDiffLose.setObjectName("ForcastEval_txtLine_TotalDiffLose")
        self.ForcastEval_txtLine_RigthPercent = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_RigthPercent.setGeometry(QtCore.QRect(10, 290, 141, 21))
        self.ForcastEval_txtLine_RigthPercent.setObjectName("ForcastEval_txtLine_RigthPercent")
        self.ForcastEval_txtLine_TotalDiffEarned = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_TotalDiffEarned.setGeometry(QtCore.QRect(180, 240, 141, 21))
        self.ForcastEval_txtLine_TotalDiffEarned.setObjectName("ForcastEval_txtLine_TotalDiffEarned")
        self.ForcastEval_txtLine_TotalRight = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_TotalRight.setGeometry(QtCore.QRect(10, 240, 141, 21))
        self.ForcastEval_txtLine_TotalRight.setObjectName("ForcastEval_txtLine_TotalRight")
        self.ForcastEval_txtLine_diffEarnedPercent = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_diffEarnedPercent.setGeometry(QtCore.QRect(350, 240, 141, 21))
        self.ForcastEval_txtLine_diffEarnedPercent.setObjectName("ForcastEval_txtLine_diffEarnedPercent")
        self.ForcastEval_txtLine_diffLosePercent = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_diffLosePercent.setGeometry(QtCore.QRect(350, 290, 141, 21))
        self.ForcastEval_txtLine_diffLosePercent.setObjectName("ForcastEval_txtLine_diffLosePercent")
        self.ForcastEval_lbl_TotalRight = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_TotalRight.setGeometry(QtCore.QRect(10, 220, 161, 20))
        self.ForcastEval_lbl_TotalRight.setObjectName("ForcastEval_lbl_TotalRight")
        self.ForcastEval_lbl_RigthPerCent = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_RigthPerCent.setGeometry(QtCore.QRect(10, 270, 161, 20))
        self.ForcastEval_lbl_RigthPerCent.setObjectName("ForcastEval_lbl_RigthPerCent")
        self.ForcastEval_lbl_RowsConsidered = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_RowsConsidered.setGeometry(QtCore.QRect(10, 320, 161, 20))
        self.ForcastEval_lbl_RowsConsidered.setObjectName("ForcastEval_lbl_RowsConsidered")
        self.ForcastEval_lbl_TotalDiffEarned = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_TotalDiffEarned.setGeometry(QtCore.QRect(180, 220, 161, 20))
        self.ForcastEval_lbl_TotalDiffEarned.setObjectName("ForcastEval_lbl_TotalDiffEarned")
        self.ForcastEval_txtLine_TotalmagMvmt = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_TotalmagMvmt.setGeometry(QtCore.QRect(180, 340, 141, 21))
        self.ForcastEval_txtLine_TotalmagMvmt.setObjectName("ForcastEval_txtLine_TotalmagMvmt")
        self.ForcastEval_lbl_ToralDiffLose = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_ToralDiffLose.setGeometry(QtCore.QRect(180, 270, 161, 20))
        self.ForcastEval_lbl_ToralDiffLose.setObjectName("ForcastEval_lbl_ToralDiffLose")
        self.ForcastEval_lbl_DiffLosePercent = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_DiffLosePercent.setGeometry(QtCore.QRect(350, 270, 161, 20))
        self.ForcastEval_lbl_DiffLosePercent.setObjectName("ForcastEval_lbl_DiffLosePercent")
        self.ForcastEval_lbl_DiffEarnedPercent = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_DiffEarnedPercent.setGeometry(QtCore.QRect(350, 220, 161, 20))
        self.ForcastEval_lbl_DiffEarnedPercent.setObjectName("ForcastEval_lbl_DiffEarnedPercent")
        self.ForcastEval_lbl_ChooseModel_11 = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_ChooseModel_11.setGeometry(QtCore.QRect(180, 320, 161, 20))
        self.ForcastEval_lbl_ChooseModel_11.setText("")
        self.ForcastEval_lbl_ChooseModel_11.setObjectName("ForcastEval_lbl_ChooseModel_11")
        self.ForcastEval_txtLine_TotalMvmPercent = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_TotalMvmPercent.setGeometry(QtCore.QRect(350, 340, 141, 21))
        self.ForcastEval_txtLine_TotalMvmPercent.setObjectName("ForcastEval_txtLine_TotalMvmPercent")
        self.ForcastEval_lbl_ToralMvmtPercent = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_ToralMvmtPercent.setGeometry(QtCore.QRect(350, 320, 161, 20))
        self.ForcastEval_lbl_ToralMvmtPercent.setObjectName("ForcastEval_lbl_ToralMvmtPercent")
        self.ForcastEval_txtLine_RealMagEarned = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_RealMagEarned.setGeometry(QtCore.QRect(520, 240, 141, 21))
        self.ForcastEval_txtLine_RealMagEarned.setObjectName("ForcastEval_txtLine_RealMagEarned")
        self.ForcastEval_lbl_RealMagEarned = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_RealMagEarned.setGeometry(QtCore.QRect(520, 220, 161, 20))
        self.ForcastEval_lbl_RealMagEarned.setObjectName("ForcastEval_lbl_RealMagEarned")
        self.ForcastEval_txtLine_RealPercentEarned = QtWidgets.QLineEdit(self.ForcastEval_Tab)
        self.ForcastEval_txtLine_RealPercentEarned.setGeometry(QtCore.QRect(520, 290, 141, 21))
        self.ForcastEval_txtLine_RealPercentEarned.setObjectName("ForcastEval_txtLine_RealPercentEarned")
        self.ForcastEval_lbl_RealPercentEarned = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_RealPercentEarned.setGeometry(QtCore.QRect(520, 270, 161, 20))
        self.ForcastEval_lbl_RealPercentEarned.setObjectName("ForcastEval_lbl_RealPercentEarned")
        self.ForcastEval_lbl_magmvmt = QtWidgets.QLabel(self.ForcastEval_Tab)
        self.ForcastEval_lbl_magmvmt.setGeometry(QtCore.QRect(180, 320, 161, 20))
        self.ForcastEval_lbl_magmvmt.setObjectName("ForcastEval_lbl_magmvmt")
        self.Tabs.addTab(self.ForcastEval_Tab, "")
        
        
        self.Forcasting_Tab = QtWidgets.QWidget()
        self.Forcasting_Tab.setObjectName("Forcasting_Tab")
        self.ForC_Loadbar_Forcast = QtWidgets.QProgressBar(self.Forcasting_Tab)
        self.ForC_Loadbar_Forcast.setGeometry(QtCore.QRect(140, 273, 391, 61))
        self.ForC_Loadbar_Forcast.setProperty("value", 0)
        self.ForC_Loadbar_Forcast.setObjectName("ForC_Loadbar_Forcast")
       
        self.ForC_lbl_Model_To_used = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_Model_To_used.setGeometry(QtCore.QRect(50, 33, 60, 16))
        self.ForC_lbl_Model_To_used.setObjectName("ForC_lbl_DateFrom")
        
        self.ForC_ComBox_Model_To_used = QtWidgets.QComboBox(self.Forcasting_Tab)
        self.ForC_ComBox_Model_To_used.setGeometry(QtCore.QRect(50, 53, 221, 26))
        self.ForC_ComBox_Model_To_used.setObjectName("ForC_ComBox_DateFrom")
        
        self.ForC_lbl_DataPrecentage = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_DataPrecentage.setGeometry(QtCore.QRect(50, 90, 121, 16))
        self.ForC_lbl_DataPrecentage.setObjectName("ForC_lbl_DataPrecentage")
        
        self.ForC_txtLine_DataPrecentage = QtWidgets.QLineEdit(self.Forcasting_Tab)
        self.ForC_txtLine_DataPrecentage.setGeometry(QtCore.QRect(50, 110, 113, 21))
        self.ForC_txtLine_DataPrecentage.setObjectName("ForC_txtLine_DataPrecentage")
        
        
        self.ForC_btn_StartForcasting = QtWidgets.QPushButton(self.Forcasting_Tab)
        self.ForC_btn_StartForcasting.setGeometry(QtCore.QRect(350, 153, 221, 101))
        self.ForC_btn_StartForcasting.setObjectName("ForC_btn_StartForcasting")
        self.ForC_radioButton_GetGraph = QtWidgets.QRadioButton(self.Forcasting_Tab)
        self.ForC_radioButton_GetGraph.setGeometry(QtCore.QRect(370, 100, 111, 20))
        self.ForC_radioButton_GetGraph.setObjectName("ForC_radioButton_GetGraph")
        self.ForC_lbl_loadBar = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_loadBar.setGeometry(QtCore.QRect(140, 273, 391, 16))
        self.ForC_lbl_loadBar.setObjectName("ForC_lbl_loadBar")
        self.ForC_Gbox_ForcastResul = QtWidgets.QGroupBox(self.Forcasting_Tab)
        self.ForC_Gbox_ForcastResul.setGeometry(QtCore.QRect(50, 153, 251, 91))
        self.ForC_Gbox_ForcastResul.setObjectName("ForC_Gbox_ForcastResul")
        self.label_13 = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.label_13.setGeometry(QtCore.QRect(10, 30, 121, 16))
        self.label_13.setObjectName("label_13")
        self.label_5 = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.label_5.setGeometry(QtCore.QRect(10, 60, 121, 16))
        self.label_5.setObjectName("label_5")
        self.ForC_lbl_TodayPrice = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.ForC_lbl_TodayPrice.setGeometry(QtCore.QRect(130, 31, 121, 16))
        self.ForC_lbl_TodayPrice.setObjectName("ForC_lbl_TodayPrice")
        self.ForC_lbl_TomorrowPrice = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.ForC_lbl_TomorrowPrice.setGeometry(QtCore.QRect(130, 61, 101, 16))
        self.ForC_lbl_TomorrowPrice.setObjectName("ForC_lbl_TomorrowPrice")
        
        self.ForC_lbl_TailBackDays = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_TailBackDays.setGeometry(QtCore.QRect(370, 30, 121, 16))
        self.ForC_lbl_TailBackDays.setObjectName("ForC_lbl_TailBackDays")
        self.ForC_txtLine_TailBackDays = QtWidgets.QLineEdit(self.Forcasting_Tab)
        self.ForC_txtLine_TailBackDays.setGeometry(QtCore.QRect(370, 50, 113, 21))
        self.ForC_txtLine_TailBackDays.setObjectName("ForC_txtLine_TailBackDays")
        
        
        self.ForC_lbl_or = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_or.setGeometry(QtCore.QRect(320, 53, 21, 16))
        self.ForC_lbl_or.setObjectName("ForC_lbl_or")
        self.Tabs.addTab(self.Forcasting_Tab, "")
        self.Model_Trainner_Tab = QtWidgets.QWidget()
        self.Model_Trainner_Tab.setObjectName("Model_Trainner_Tab")
        self.MoTr_lbl_chooseModel = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_chooseModel.setGeometry(QtCore.QRect(70, 30, 111, 16))
        self.MoTr_lbl_chooseModel.setObjectName("MoTr_lbl_chooseModel")
        self.MoTr_lbl_DataSet = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_DataSet.setGeometry(QtCore.QRect(70, 80, 60, 16))
        self.MoTr_lbl_DataSet.setObjectName("MoTr_lbl_DataSet")
        self.MoTr_btn_Totrain = QtWidgets.QPushButton(self.Model_Trainner_Tab)
        self.MoTr_btn_Totrain.setGeometry(QtCore.QRect(470, 30, 141, 51))
        self.MoTr_btn_Totrain.setObjectName("MoTr_btn_Totrain")
        self.MoTr_LoadBar_CMDTraining = QtWidgets.QProgressBar(self.Model_Trainner_Tab)
        self.MoTr_LoadBar_CMDTraining.setGeometry(QtCore.QRect(120, 320, 411, 41))
        self.MoTr_LoadBar_CMDTraining.setProperty("value", 0)
        self.MoTr_LoadBar_CMDTraining.setObjectName("MoTr_LoadBar_CMDTraining")
        self.MoTr_lbl_CMD_training = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_CMD_training.setGeometry(QtCore.QRect(120, 310, 370, 16))
        self.MoTr_lbl_CMD_training.setObjectName("MoTr_lbl_CMD_training")
        self.MoTr_txtLine_PercentDataSet = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_PercentDataSet.setGeometry(QtCore.QRect(70, 150, 61, 21))
        self.MoTr_txtLine_PercentDataSet.setObjectName("MoTr_txtLine_PercentDataSet")
        self.MoTr_lbl_PercentDataset = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_PercentDataset.setGeometry(QtCore.QRect(70, 130, 111, 16))
        self.MoTr_lbl_PercentDataset.setObjectName("MoTr_lbl_PercentDataset")
        self.MoTr_ComBox_ChooseModel = QtWidgets.QComboBox(self.Model_Trainner_Tab)
        self.MoTr_ComBox_ChooseModel.setGeometry(QtCore.QRect(70, 50, 111, 26))
        self.MoTr_ComBox_ChooseModel.setObjectName("MoTr_ComBox_ChooseModel")
        
        self.MoTr_btn_Cancel_train = QtWidgets.QPushButton(self.Model_Trainner_Tab)
        self.MoTr_btn_Cancel_train.setGeometry(QtCore.QRect(470, 90, 141, 51))
        self.MoTr_btn_Cancel_train.setObjectName("MoTr_btn_Cancel_train")
        self.MoTr_ComBox_Column_T_Predict = QtWidgets.QComboBox(self.Model_Trainner_Tab)
        self.MoTr_ComBox_Column_T_Predict.setGeometry(QtCore.QRect(270, 50, 81, 26))
        self.MoTr_ComBox_Column_T_Predict.setObjectName("MoTr_ComBox_Column_T_Predict")
        self.MoTr_ComBox_Column_T_Predict.addItem("")
        self.MoTr_ComBox_Column_T_Predict.addItem("")
        self.MoTr_ComBox_Column_T_Predict.addItem("")
        self.MoTr_ComBox_Column_T_Predict.addItem("")
        self.MoTr_ComBox_Column_T_Predict.addItem("")
        self.MoTr_lbl_ColumnPredict = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_ColumnPredict.setGeometry(QtCore.QRect(270, 30, 111, 16))
        self.MoTr_lbl_ColumnPredict.setObjectName("MoTr_lbl_ColumnPredict")
        
        self.MoTr_lbl_ephocs = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_ephocs.setGeometry(QtCore.QRect(270, 80, 91, 16))
        self.MoTr_lbl_ephocs.setObjectName("MoTr_lbl_ephocs")
        self.MoTr_txtLine_ephocs = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_ephocs.setGeometry(QtCore.QRect(270, 100, 81, 21))
        self.MoTr_txtLine_ephocs.setObjectName("MoTr_txtLine_ephocs")
        
        self.MoTr_lbl_ephocs_done = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_ephocs_done.setGeometry(QtCore.QRect(270, 130, 91, 16))
        self.MoTr_lbl_ephocs_done.setObjectName("MoTr_lbl_ephocs_done")
        self.MoTr_txtLine_ephocs_done = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_ephocs_done.setGeometry(QtCore.QRect(270, 150, 81, 21))
        self.MoTr_txtLine_ephocs_done.setObjectName("MoTr_txtLine_ephocs_done")
        self.MoTr_txtLine_ephocs_done.setEnabled(False)

        
        self.MoTr_lbl_loss = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_loss.setGeometry(QtCore.QRect(70, 180, 91, 16))
        self.MoTr_lbl_loss.setObjectName("MoTr_lbl_loss")
        self.MoTr_txtLine_loss = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_loss.setGeometry(QtCore.QRect(70, 200, 81, 21))
        self.MoTr_txtLine_loss.setObjectName("MoTr_txtLine_loss")
        self.MoTr_txtLine_loss.setEnabled(False)
        
        self.MoTr_lbl_mean_sqr_error = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_mean_sqr_error.setGeometry(QtCore.QRect(270, 180, 131, 16))
        self.MoTr_lbl_mean_sqr_error.setObjectName("MoTr_lbl_mean_sqr_error")
        self.MoTr_txtLine_mean_sqr_error = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_mean_sqr_error.setGeometry(QtCore.QRect(270, 200, 81, 21))
        self.MoTr_txtLine_mean_sqr_error.setObjectName("MoTr_txtLine_mean_sqr_error")
        self.MoTr_txtLine_mean_sqr_error.setEnabled(False)
        
        self.MoTr_lbl_val_loss = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_val_loss.setGeometry(QtCore.QRect(70, 230, 91, 16))
        self.MoTr_lbl_val_loss.setObjectName("MoTr_lbl_val_loss")
        self.MoTr_txtLine_val_loss = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_val_loss.setGeometry(QtCore.QRect(70, 250, 81, 21))
        self.MoTr_txtLine_val_loss.setObjectName("MoTr_txtLine_val_loss")
        self.MoTr_txtLine_val_loss.setEnabled(False)
    
        self.MoTr_lbl_val_mean_sqr_error = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_val_mean_sqr_error.setGeometry(QtCore.QRect(270, 230, 151, 16))
        self.MoTr_lbl_val_mean_sqr_error.setObjectName("MoTr_lbl_val_mean_sqr_error")
        self.MoTr_txtLine_val_mean_sqr_error = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_val_mean_sqr_error.setGeometry(QtCore.QRect(270, 250, 81, 21))
        self.MoTr_txtLine_val_mean_sqr_error.setObjectName("MoTr_txtLine_val_mean_sqr_error")
        self.MoTr_txtLine_val_mean_sqr_error.setEnabled(False)
        
        self.MoTr_ComBox_DataSet = QtWidgets.QComboBox(self.Model_Trainner_Tab)
        self.MoTr_ComBox_DataSet.setGeometry(QtCore.QRect(70, 100, 111, 26))
        self.MoTr_ComBox_DataSet.setObjectName("MoTr_ComBox_DataSet")
        self.MoTr_ComBox_DataSet.clear()
        #for i in self.DataSet_all: #ComboBox is updated
        #    Current_Row=i[0]
        #    self.MoTr_ComBox_DataSet.addItem(str(Current_Row))    
        
        self.Tabs.addTab(self.Model_Trainner_Tab, "")
        self.Data_Manager_tab = QtWidgets.QWidget()
        self.Data_Manager_tab.setObjectName("Data_Manager_tab")
        self.DaMa_lbl_Seed_DataSet = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_Seed_DataSet.setGeometry(QtCore.QRect(60, 20, 201, 16))
        self.DaMa_lbl_Seed_DataSet.setObjectName("DaMa_lbl_Seed_DataSet")
        self.DaMa_btn_Update = QtWidgets.QPushButton(self.Data_Manager_tab)
        self.DaMa_btn_Update.setGeometry(QtCore.QRect(500, 200, 113, 101))
        self.DaMa_btn_Update.setObjectName("DaMa_btn_Update")
        self.DaMa_LoadBar_Progres = QtWidgets.QProgressBar(self.Data_Manager_tab)
        self.DaMa_LoadBar_Progres.setGeometry(QtCore.QRect(150, 340, 411, 41))
        self.DaMa_LoadBar_Progres.setProperty("value", 24)
        self.DaMa_LoadBar_Progres.setObjectName("DaMa_LoadBar_Progres")
        self.DaMa_LoadBar_Progres.setProperty("value",0)
        self.DaMa_Lbl_Progres = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_Lbl_Progres.setGeometry(QtCore.QRect(150, 330, 291, 16))
        self.DaMa_Lbl_Progres.setObjectName("DaMa_Lbl_Progres")
        self.DaMa_lbl_DataSetId = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_DataSetId.setGeometry(QtCore.QRect(370, 20, 91, 16))
        self.DaMa_lbl_DataSetId.setObjectName("DaMa_lbl_DataSetId")    
        self.DaMa_btn_Create = QtWidgets.QPushButton(self.Data_Manager_tab)
        self.DaMa_btn_Create.setGeometry(QtCore.QRect(370, 200, 113, 101))
        self.DaMa_btn_Create.setObjectName("DaMa_btn_Create")
        self.DaMa_txtLine_Stock_Item = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_Stock_Item.setGeometry(QtCore.QRect(60, 90, 231, 21))
        self.DaMa_txtLine_Stock_Item.setObjectName("DaMa_txtLine_Stock_Item")
        self.DaMa_txtLine_BackDay = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_BackDay.setGeometry(QtCore.QRect(60, 140, 80, 21))
        self.DaMa_txtLine_BackDay.setObjectName("DaMa_txtLine_BackDay")
        self.DaMa_txtLine_FFT_Frec = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_FFT_Frec.setGeometry(QtCore.QRect(210, 140, 80, 21))
        self.DaMa_txtLine_FFT_Frec.setObjectName("DaMa_txtLine_FFT_Frec")
        self.DaMa_lbl_Stock_Item = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_Stock_Item.setGeometry(QtCore.QRect(60, 70, 201, 16))
        self.DaMa_lbl_Stock_Item.setObjectName("DaMa_lbl_Stock_Item")
        self.DaMa_txtLine_DateTime = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_DateTime.setGeometry(QtCore.QRect(370, 90, 241, 21))
        self.DaMa_txtLine_DateTime.setObjectName("DaMa_txtLine_DateTime")
        self.DaMa_txtLine_DateTime.setEnabled(False)
        self.DaMa_txtLine_PathCSV_File = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_PathCSV_File.setGeometry(QtCore.QRect(370, 140, 241, 21))
        self.DaMa_txtLine_PathCSV_File.setObjectName("DaMa_txtLine_PathCSV_File")
        self.DaMa_lbl_DateTime = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_DateTime.setGeometry(QtCore.QRect(370, 70, 201, 16))
        self.DaMa_lbl_DateTime.setObjectName("DaMa_lbl_DateTime")
        self.DaMa_lbl_BackDays = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_BackDays.setGeometry(QtCore.QRect(60, 120, 80, 16))
        self.DaMa_lbl_BackDays.setObjectName("DaMa_lbl_BackDays")
        self.DaMa_lbl_FFT_Frec = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_FFT_Frec.setGeometry(QtCore.QRect(210, 120, 80, 16))
        self.DaMa_lbl_FFT_Frec.setObjectName("DaMa_lbl_FFT_Frec")
        self.DaMa_lbl_PathCSVFile = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_PathCSVFile.setGeometry(QtCore.QRect(370, 120, 201, 16))
        self.DaMa_lbl_PathCSVFile.setObjectName("DaMa_lbl_PathCSVFile")
        self.DaMa_CheckBox_Open = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Open.setGeometry(QtCore.QRect(40, 200, 100, 20))
        self.DaMa_CheckBox_Open.setObjectName("DaMa_CheckBox_Open")
        self.DaMa_lbl_Columns = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_Columns.setGeometry(QtCore.QRect(60, 180, 201, 16))
        self.DaMa_lbl_Columns.setObjectName("DaMa_lbl_Columns")
        self.DaMa_CheckBox_High = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_High.setGeometry(QtCore.QRect(40, 220, 100, 20))
        self.DaMa_CheckBox_High.setObjectName("DaMa_CheckBox_high")
        self.DaMa_CheckBox_Low = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Low.setGeometry(QtCore.QRect(40, 240, 100, 20))
        self.DaMa_CheckBox_Low.setObjectName("DaMa_CheckBox_Low")
        self.DaMa_CheckBox_Close = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Close.setGeometry(QtCore.QRect(40, 260, 100, 20))
        self.DaMa_CheckBox_Close.setObjectName("DaMa_CheckBox_Close")
        self.DaMa_CheckBox_DayNumber = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_DayNumber.setGeometry(QtCore.QRect(240, 200, 100, 20))
        self.DaMa_CheckBox_DayNumber.setObjectName("DaMa_CheckBox_DayNumber")
        self.DaMa_CheckBox_Open_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Open_FFT.setGeometry(QtCore.QRect(120, 200, 100, 20))
        self.DaMa_CheckBox_Open_FFT.setObjectName("DaMa_CheckBox_Open_FFT")
        self.DaMa_CheckBox_High_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_High_FFT.setGeometry(QtCore.QRect(120, 220, 100, 20))
        self.DaMa_CheckBox_High_FFT.setObjectName("DaMa_CheckBox_HighFFT")
        self.DaMa_CheckBox_Low_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Low_FFT.setGeometry(QtCore.QRect(120, 240, 100, 21))
        self.DaMa_CheckBox_Low_FFT.setObjectName("DaMa_CheckBox_Low_FFT")
        self.DaMa_CheckBox_Close_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Close_FFT.setGeometry(QtCore.QRect(120, 260, 100, 21))
        self.DaMa_CheckBox_Close_FFT.setObjectName("DaMa_CheckBox_Close_FFT")
        self.DaMa_CheckBox_Day_MonthNDay_C = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Day_MonthNDay_C.setGeometry(QtCore.QRect(240, 240, 100, 20))
        self.DaMa_CheckBox_Day_MonthNDay_C.setObjectName("DaMa_CheckBox_DayMonth")
        self.DaMa_CheckBox_Year = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Year.setGeometry(QtCore.QRect(240, 260, 100, 20))
        self.DaMa_CheckBox_Year.setObjectName("DaMa_CheckBox_Year")
        self.DaMa_CheckBox_Volume = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Volume.setGeometry(QtCore.QRect(40, 280, 100, 20))
        self.DaMa_CheckBox_Volume.setObjectName("DaMa_CheckBox_Volume")
        self.DaMa_CheckBox_Volume_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Volume_FFT.setGeometry(QtCore.QRect(120, 280, 100, 20))
        self.DaMa_CheckBox_Volume_FFT.setObjectName("DaMa_CheckBox_Volume_FFT")
        
        self.DaMa_ComBox_DataSet_Id = QtWidgets.QComboBox(self.Data_Manager_tab)
        self.DaMa_ComBox_DataSet_Id.setGeometry(QtCore.QRect(370, 40, 101, 26))
        self.DaMa_ComBox_DataSet_Id.setObjectName("DaMa_ComBox_DataSet_Id")
        self.DaMa_ComBox_DataSet_Id.clear() #When starting app, combobox is updated
        
        self.DaMa_ComBox_Seed_DataSet = QtWidgets.QComboBox(self.Data_Manager_tab)
        self.DaMa_ComBox_Seed_DataSet.setGeometry(QtCore.QRect(60, 40, 101, 26))
        self.DaMa_ComBox_Seed_DataSet.setObjectName("DaMa_ComBox_Seed_DataSet")
        self.DaMa_ComBox_Seed_DataSet.clear()
        #for i in self.SeedDataSet_all: #ComboBox is updated
        #    Current_Row=i[0]
        #    self.DaMa_ComBox_Seed_DataSet.addItem(str(Current_Row))
        
        
        self.Tabs.addTab(self.Data_Manager_tab, "")
        
        self.ModCrtion = QtWidgets.QWidget()
        self.ModCrtion.setObjectName("ModCrtion")
        self.Model_C_LBL_Progres = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Progres.setGeometry(QtCore.QRect(160, 340, 450, 16))
        self.Model_C_LBL_Progres.setObjectName("Model_C_LBL_Progres")
        self.Model_C_LdBar = QtWidgets.QProgressBar(self.ModCrtion)
        self.Model_C_LdBar.setGeometry(QtCore.QRect(160, 350, 411, 41))
        self.Model_C_LdBar.setProperty("value", 0)
        self.Model_C_LdBar.setObjectName("Model_C_LdBar")
        self.Model_C_txtLine_LSTM1 = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_LSTM1.setGeometry(QtCore.QRect(20, 90, 270, 25))
        self.Model_C_txtLine_LSTM1.setObjectName("Model_C_txtLine_LSTM1")
        self.Model_C_txtLine_LSTM2 = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_LSTM2.setGeometry(QtCore.QRect(20, 150, 270, 25))
        self.Model_C_txtLine_LSTM2.setObjectName("Model_C_txtLine_LSTM2")
        self.Model_C_PB_Create_M = QtWidgets.QPushButton(self.ModCrtion)
        self.Model_C_PB_Create_M.setGeometry(QtCore.QRect(40, 260, 221, 71))
        self.Model_C_PB_Create_M.setObjectName("Model_C_PB_Create_M")
        self.Model_C_txtLine_Lyr_Dns = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_Lyr_Dns.setGeometry(QtCore.QRect(360, 30, 270, 25))
        self.Model_C_txtLine_Lyr_Dns.setObjectName("Model_C_txtLine_Lyr_Dns")
        self.Model_C_Lyr_Dn_Rgzr = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_Lyr_Dn_Rgzr.setGeometry(QtCore.QRect(360, 90, 270, 25))
        self.Model_C_Lyr_Dn_Rgzr.setObjectName("Model_C_Lyr_Dn_Rgzr")
        self.Model_C_txtLine_OptAdam_Co = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_OptAdam_Co.setGeometry(QtCore.QRect(360, 150, 270, 25))
        self.Model_C_txtLine_OptAdam_Co.setObjectName("Model_C_txtLine_OptAdam_Co")
        self.Model_C_txtLine_Colums = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_Colums.setGeometry(QtCore.QRect(360, 210, 270, 25))
        self.Model_C_txtLine_Colums.setObjectName("Model_C_txtLine_Colums")
        self.Model_C_txtLine_LryDCoeff = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_LryDCoeff.setGeometry(QtCore.QRect(20, 210, 270, 25))
        self.Model_C_txtLine_LryDCoeff.setObjectName("Model_C_txtLine_LryDCoeff")
        self.Model_C_LBL_LSTM1 = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_LSTM1.setGeometry(QtCore.QRect(20, 70, 180, 16))
        self.Model_C_LBL_LSTM1.setObjectName("Model_C_LBL_LSTM1")
        self.Model_C_LBL_LSTM2 = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_LSTM2.setGeometry(QtCore.QRect(20, 130, 180, 16))
        self.Model_C_LBL_LSTM2.setObjectName("Model_C_LBL_LSTM2")
        self.Model_C_LBL_LryDCoeff = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_LryDCoeff.setGeometry(QtCore.QRect(20, 190, 180, 16))
        self.Model_C_LBL_LryDCoeff.setObjectName("Model_C_LBL_LryDCoeff")
        self.Model_C_LBL_Lyr_Dns = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Lyr_Dns.setGeometry(QtCore.QRect(360, 10, 180, 16))
        self.Model_C_LBL_Lyr_Dns.setObjectName("Model_C_LBL_Lyr_Dns")
        self.Model_C_LBL_Lyr_Dn_Rgzr = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Lyr_Dn_Rgzr.setGeometry(QtCore.QRect(360, 70, 180, 16))
        self.Model_C_LBL_Lyr_Dn_Rgzr.setObjectName("Model_C_LBL_Lyr_Dn_Rgzr")
        self.Model_C_LBL_OptAdam_Co = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_OptAdam_Co.setGeometry(QtCore.QRect(360, 130, 180, 16))
        self.Model_C_LBL_OptAdam_Co.setObjectName("Model_C_LBL_OptAdam_Co")
        self.Model_C_LBL_Colums = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Colums.setGeometry(QtCore.QRect(360, 190, 180, 16))
        self.Model_C_LBL_Colums.setObjectName("Model_C_LBL_Colums")
        self.Model_C_LBL_BackDays = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_BackDays.setGeometry(QtCore.QRect(20, 10, 181, 16))
        self.Model_C_LBL_BackDays.setObjectName("Model_C_LBL_BackDays")
        self.Model_C_txtLine_BackDays = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_BackDays.setGeometry(QtCore.QRect(20, 30, 131, 25))
        self.Model_C_txtLine_BackDays.setObjectName("Model_C_txtLine_LryDCoeff")
        self.Model_C_LBL_Int_Model = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Int_Model.setGeometry(QtCore.QRect(280, 260, 180, 16))
        self.Model_C_LBL_Int_Model.setObjectName("Model_C_LBL_Int_Model")
        self.Model_C_ComBox_Int_Model = QtWidgets.QComboBox(self.ModCrtion)
        self.Model_C_ComBox_Int_Model.setGeometry(QtCore.QRect(280, 280, 141, 25))
        self.Model_C_ComBox_Int_Model.setObjectName("Model_C_ComBox_Int_Model")
        
        self.Model_C_LBL_Int_Seed_Data = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Int_Seed_Data.setGeometry(QtCore.QRect(195, 10, 180, 26))
        self.Model_C_LBL_Int_Seed_Data.setObjectName("Model_C_LBL_Int_Seed_Data")   
        self.Model_C_ComBox_Int_Seed_Data = QtWidgets.QComboBox(self.ModCrtion)
        self.Model_C_ComBox_Int_Seed_Data.setGeometry(QtCore.QRect(195, 30, 100, 26))
        self.Model_C_ComBox_Int_Seed_Data.setObjectName("Model_C_ComBox_Int_Seed_Data")
        self.Model_C_ComBox_Int_Seed_Data.clear() #When starting app, combobox is updated
        #for i in self.SeedData_SLCT_all: #ComboBox is updated
        #    Current_Row=i[0]
        #    self.Model_C_ComBox_Int_Seed_Data.addItem(str(Current_Row))
        
        self.Tabs.addTab(self.ModCrtion, "")
        
        
        GUI_LSTM_FORCASTER.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(GUI_LSTM_FORCASTER)
        self.statusbar.setObjectName("statusbar")
        GUI_LSTM_FORCASTER.setStatusBar(self.statusbar)

        self.retranslateUi(GUI_LSTM_FORCASTER)
        self.Tabs.setCurrentIndex(4)
        QtCore.QMetaObject.connectSlotsByName(GUI_LSTM_FORCASTER)
        
        ### INIT Function calls
        self.UpdateLocalObjects()
        
        #----------- TAB Eval Forcast  -------------
        ############ General Emit Signals
        self.ForcastEval_Combox_ChooseItem.currentIndexChanged.connect(self.item_evalForcast_ComboBoxChanged)
        self.ForcastEval_Combox_ChooseModel.currentIndexChanged.connect(self.model_evalFolcast_ComboBoxChanged)
        self.ForcastEval_Combox_Chooseforcast.currentIndexChanged.connect(self.Forcast_evalFolcast_ComboBoxChanged)
        ############ Thread Emit Signals
        self.Evaluator.Update_EvaluationStatus.connect(self.Event_EvaluationStatus)
        self.Evaluator.Update_Progress.connect(self.Event_UpdateProgress_EvaluationProcess)
        self.Evaluator.Update_Progress_String.connect(self.Event_UpdateProgress_string_Evaluation_Process)
        #####  Buttons calls ##### 
        self.ForcastEval_btn_EvaluateFor.clicked.connect(self.Start_Evaluation)
        self.ForcastEval_btn_DeleteFor.clicked.connect(self.Delete_Forcast)
        
        #----------- TAB MODEL FORCASTING  -------------
        ############ General Emit Signals
        self.ForC_ComBox_Model_To_used.currentIndexChanged.connect(self.Model_ForcastWith_ComboBoxChanged)
        ############ Thread Emit Signals
        self.Forcaster.Update_ForcastingProcsStatus.connect(self.Event_ForcastingStatus)
        self.Forcaster.Update_Progress.connect(self.Event_UpdateProgress_ForcastingProcess)
        self.Forcaster.Update_Progress_String.connect(self.Event_UpdateProgress_string_Forcasting_Process)
        #####  Buttons calls ##### 
        self.ForC_btn_StartForcasting.clicked.connect(self.Start_Forcasting)

        
        #----------- TAB MODEL TRAINNING  -------------
        ############ General Emit Signals
        self.MoTr_ComBox_ChooseModel.currentIndexChanged.connect(self.Model_To_Train_ComboBoxChanged)
        
        ############ Thread Emit Signals
        self.trainner.Update_TrainningProcssStatus.connect(self.Event_TrainningStatus)
        self.trainner.Update_Progress.connect(self.Event_UpdateProgress_TrainningProcess)
        self.trainner.Update_Progress_String.connect(self.Event_UpdateProgress_string_Trainning_Process)
        #####  Buttons calls ##### 
        self.MoTr_btn_Totrain.clicked.connect(self.Start_Trainning)
        self.MoTr_btn_Cancel_train.clicked.connect(self.Cancel_Trainning)
        
        
        #---------- TAB MODEL CREATOR  ------------
        ############ General Emit Signals
        self.Model_C_ComBox_Int_Seed_Data.currentIndexChanged.connect(self.SeedDataComboBoxChanged)
        self.Model_C_ComBox_Int_Model.currentIndexChanged.connect(self.ModelsComboBoxChanged)
        ############ Thread Emit Signals
        self.model_creator.Update_ModelCreationStatus.connect(self.Event_ModelCreationStatus)
        self.model_creator.Update_Progress.connect(self.Event_UpdateProgress_ModelCreator)
        self.model_creator.Update_Progress_String.connect(self.Event_UpdateProgress_string_ModelCreator)
        #####  Buttons calls ##### 
        self.Model_C_PB_Create_M.clicked.connect(self.Create_New_Model)
        
        
        #---------- TAB DATA MANAGEMENT  ------------
        ############ General Emit Signals
        self.DaMa_ComBox_Seed_DataSet.currentIndexChanged.connect(self.SeedDataSetComboBoxChanged)
        self.DaMa_ComBox_DataSet_Id.currentIndexChanged.connect(self.DataSetComboBoxChanged)
        
        ############ Thread Emit Signals
        self.DataSet_creator.Update_DataSetCreationStatus.connect(self.Event_DataSetCreationStatus)
        self.DataSet_creator.Update_Progress.connect(self.Event_UpdateProgress_DataSetCreator)
        self.DataSet_creator.Update_Progress_String.connect(self.Event_UpdateProgress_string_DataSetCreator)
        
        #####  Buttons calls #####   
        self.DaMa_btn_Create.clicked.connect(self.Create_DataSet)
        self.DaMa_btn_Update.clicked.connect(self.Update_DataSet)     
         
        

    def retranslateUi(self, GUI_LSTM_FORCASTER):
        _translate = QtCore.QCoreApplication.translate
        GUI_LSTM_FORCASTER.setWindowTitle(_translate("GUI_LSTM_FORCASTER", "Stock_Forcastig_Interface"))
        
        self.ForcastEval_lbl_ChooseModel.setText(_translate("GUI_LSTM_FORCASTER", "To Choose model"))
        self.ForcastEval_btn_EvaluateFor.setText(_translate("GUI_LSTM_FORCASTER", "Evaluate Forcast"))
        self.ForcastEval_lbl_Chooseitem.setText(_translate("GUI_LSTM_FORCASTER", "To Choose Item"))
        self.ForcastEval_lbl_ShowShape.setText(_translate("GUI_LSTM_FORCASTER", "Shape"))
        self.ForcastEval_lbl_ChooseForcast.setText(_translate("GUI_LSTM_FORCASTER", "To Choose Forcast"))
        self.ForcastEval_btn_DeleteFor.setText(_translate("GUI_LSTM_FORCASTER", "Delete Forcast"))
        self.ForcastEval_lbl_TotalRight.setText(_translate("GUI_LSTM_FORCASTER", "Total rigth"))
        self.ForcastEval_lbl_RigthPerCent.setText(_translate("GUI_LSTM_FORCASTER", "Rigth %"))
        self.ForcastEval_lbl_RowsConsidered.setText(_translate("GUI_LSTM_FORCASTER", "Total row considered"))
        self.ForcastEval_lbl_TotalDiffEarned.setText(_translate("GUI_LSTM_FORCASTER", "Total diff earned"))
        self.ForcastEval_lbl_ToralDiffLose.setText(_translate("GUI_LSTM_FORCASTER", "Total diff lose"))
        self.ForcastEval_lbl_DiffLosePercent.setText(_translate("GUI_LSTM_FORCASTER", "diff lose %"))
        self.ForcastEval_lbl_DiffEarnedPercent.setText(_translate("GUI_LSTM_FORCASTER", "diff earned %"))
        self.ForcastEval_lbl_ToralMvmtPercent.setText(_translate("GUI_LSTM_FORCASTER", "Total mvmt %"))
        self.ForcastEval_lbl_RealMagEarned.setText(_translate("GUI_LSTM_FORCASTER", "Real  mag earned"))
        self.ForcastEval_lbl_RealPercentEarned.setText(_translate("GUI_LSTM_FORCASTER", "Real % earned"))
        self.ForcastEval_lbl_magmvmt.setText(_translate("GUI_LSTM_FORCASTER", "Total magnitud mvmt"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.ForcastEval_Tab), _translate("GUI_LSTM_FORCASTER", "Forcast evaluate"))
        
        self.ForC_lbl_Model_To_used.setText(_translate("GUI_LSTM_FORCASTER", "Model To use"))
        self.ForC_lbl_DataPrecentage.setText(_translate("GUI_LSTM_FORCASTER", "Data precentage %"))
        
        self.ForC_btn_StartForcasting.setText(_translate("GUI_LSTM_FORCASTER", "START FORCASTING"))
        self.ForC_radioButton_GetGraph.setText(_translate("GUI_LSTM_FORCASTER", "Get the graph?"))
        self.ForC_radioButton_GetGraph.setChecked(True)
        
        self.ForC_lbl_loadBar.setText(_translate("GUI_LSTM_FORCASTER", "Ready to forcast"))
        self.ForC_Gbox_ForcastResul.setTitle(_translate("GUI_LSTM_FORCASTER", "Forcast Result Close"))
        self.label_13.setText(_translate("GUI_LSTM_FORCASTER", "Today Close price:"))
        self.label_5.setText(_translate("GUI_LSTM_FORCASTER", "Tomorrow forcast:"))
        self.ForC_lbl_TodayPrice.setText(_translate("GUI_LSTM_FORCASTER", ""))
        self.ForC_lbl_TomorrowPrice.setText(_translate("GUI_LSTM_FORCASTER", ""))
        
        self.ForC_txtLine_TailBackDays.setText(_translate("GUI_LSTM_FORCASTER", "200"))
        self.ForC_txtLine_DataPrecentage.setText(_translate("GUI_LSTM_FORCASTER", "100"))
        
        self.ForC_lbl_TailBackDays.setText(_translate("GUI_LSTM_FORCASTER", "Tail backdays"))
        self.ForC_lbl_or.setText(_translate("GUI_LSTM_FORCASTER", "Or"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Forcasting_Tab), _translate("GUI_LSTM_FORCASTER", "Forcasting"))
        self.MoTr_lbl_chooseModel.setText(_translate("GUI_LSTM_FORCASTER", "To choose Model"))
        self.MoTr_lbl_DataSet.setText(_translate("GUI_LSTM_FORCASTER", "DataSet"))
        self.MoTr_btn_Totrain.setText(_translate("GUI_LSTM_FORCASTER", "To train"))
        self.MoTr_lbl_CMD_training.setText(_translate("GUI_LSTM_FORCASTER", "CMD training process"))
        self.MoTr_txtLine_PercentDataSet.setText(_translate("GUI_LSTM_FORCASTER", "96"))
        self.MoTr_lbl_PercentDataset.setText(_translate("GUI_LSTM_FORCASTER", "% Data To used"))
        self.MoTr_btn_Cancel_train.setText(_translate("GUI_LSTM_FORCASTER", "Cancel"))
        self.MoTr_ComBox_Column_T_Predict.setItemText(0, _translate("GUI_LSTM_FORCASTER", "Open"))
        self.MoTr_ComBox_Column_T_Predict.setItemText(1, _translate("GUI_LSTM_FORCASTER", "High"))
        self.MoTr_ComBox_Column_T_Predict.setItemText(2, _translate("GUI_LSTM_FORCASTER", "Low"))
        self.MoTr_ComBox_Column_T_Predict.setItemText(3, _translate("GUI_LSTM_FORCASTER", "Close"))
        self.MoTr_ComBox_Column_T_Predict.setItemText(4, _translate("GUI_LSTM_FORCASTER", "Volume"))
        self.MoTr_lbl_ColumnPredict.setText(_translate("GUI_LSTM_FORCASTER", "Column to predict"))
        
        self.MoTr_lbl_ephocs.setText(_translate("GUI_LSTM_FORCASTER", "ephocs to do"))
        self.MoTr_txtLine_ephocs.setText(_translate("GUI_LSTM_FORCASTER", "50"))
        
        self.MoTr_lbl_ephocs_done.setText(_translate("GUI_LSTM_FORCASTER", "ephocs done"))
        self.MoTr_txtLine_ephocs_done.setText(_translate("GUI_LSTM_FORCASTER", "0"))
        
        ###################
        ###############_--------------
        self.MoTr_lbl_loss.setText(_translate("GUI_LSTM_FORCASTER", "last loss"))
        self.MoTr_txtLine_loss.setText(_translate("GUI_LSTM_FORCASTER", "0"))
        
        self.MoTr_lbl_mean_sqr_error.setText(_translate("GUI_LSTM_FORCASTER", "mean sqr error"))
        self.MoTr_txtLine_mean_sqr_error.setText(_translate("GUI_LSTM_FORCASTER", "0"))
        
        self.MoTr_lbl_val_loss.setText(_translate("GUI_LSTM_FORCASTER", "val loss"))
        self.MoTr_txtLine_val_loss.setText(_translate("GUI_LSTM_FORCASTER", "0"))
        
        self.MoTr_lbl_val_mean_sqr_error.setText(_translate("GUI_LSTM_FORCASTER", "val mean sqr error"))
        self.MoTr_txtLine_val_mean_sqr_error.setText(_translate("GUI_LSTM_FORCASTER", "0"))
        
        
        self.Tabs.setTabText(self.Tabs.indexOf(self.Model_Trainner_Tab), _translate("GUI_LSTM_FORCASTER", "Model Trainner"))
        self.DaMa_lbl_Seed_DataSet.setText(_translate("GUI_LSTM_FORCASTER", "Seed DataSet Id"))
        self.DaMa_btn_Update.setText(_translate("GUI_LSTM_FORCASTER", "Update"))
        self.DaMa_Lbl_Progres.setText(_translate("GUI_LSTM_FORCASTER", "Ready"))
        self.DaMa_lbl_DataSetId.setText(_translate("GUI_LSTM_FORCASTER", "DataSet id"))
        self.DaMa_btn_Create.setText(_translate("GUI_LSTM_FORCASTER", "Create"))
        self.DaMa_lbl_Stock_Item.setText(_translate("GUI_LSTM_FORCASTER", "Stock Item"))
        self.DaMa_lbl_DateTime.setText(_translate("GUI_LSTM_FORCASTER", "Date time"))
        self.DaMa_lbl_BackDays.setText(_translate("GUI_LSTM_FORCASTER", "BackDays"))
        self.DaMa_lbl_FFT_Frec.setText(_translate("GUI_LSTM_FORCASTER", "FFT_frec"))
        self.DaMa_lbl_PathCSVFile.setText(_translate("GUI_LSTM_FORCASTER", "Path CSV file"))
        self.DaMa_CheckBox_Open.setText(_translate("GUI_LSTM_FORCASTER", "Open"))
        self.DaMa_lbl_Columns.setText(_translate("GUI_LSTM_FORCASTER", "Columns"))
        self.DaMa_CheckBox_High.setText(_translate("GUI_LSTM_FORCASTER", "High"))
        self.DaMa_CheckBox_Low.setText(_translate("GUI_LSTM_FORCASTER", "Low"))
        self.DaMa_CheckBox_Close.setText(_translate("GUI_LSTM_FORCASTER", "Close"))
        self.DaMa_CheckBox_DayNumber.setText(_translate("GUI_LSTM_FORCASTER", "DayNumber"))
        self.DaMa_CheckBox_Open_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Open FFT"))
        self.DaMa_CheckBox_High_FFT.setText(_translate("GUI_LSTM_FORCASTER", "High FFT"))
        self.DaMa_CheckBox_Low_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Low FFT"))
        self.DaMa_CheckBox_Close_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Close FFT"))
        self.DaMa_CheckBox_Day_MonthNDay_C.setText(_translate("GUI_LSTM_FORCASTER", "DayMonth"))
        self.DaMa_CheckBox_Year.setText(_translate("GUI_LSTM_FORCASTER", "Year"))
        self.DaMa_CheckBox_Volume.setText(_translate("GUI_LSTM_FORCASTER", "Volume"))
        self.DaMa_CheckBox_Volume_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Volume FFT"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Data_Manager_tab), _translate("GUI_LSTM_FORCASTER", "Data manager"))
        
        self.Model_C_LBL_Progres.setText(_translate("GUI_LSTM_FORCASTER", "Ready"))
        self.Model_C_LdBar.setProperty("value",0)
        self.Model_C_PB_Create_M.setText(_translate("GUI_LSTM_FORCASTER", "Create model"))
        self.Model_C_LBL_Int_Seed_Data.setText(_translate("GUI_LSTM_FORCASTER", "#Int Seed_Data"))
        self.Model_C_LBL_LSTM1.setText(_translate("GUI_LSTM_FORCASTER", "LSTM_1_#Units"))
        self.Model_C_LBL_LSTM2.setText(_translate("GUI_LSTM_FORCASTER", "LSTM_2_#Units"))
        self.Model_C_LBL_LryDCoeff.setText(_translate("GUI_LSTM_FORCASTER", "Lyr_Drop_Coeff"))
        self.Model_C_LBL_Lyr_Dns.setText(_translate("GUI_LSTM_FORCASTER", "Lyr_Dns_#Unit"))
        self.Model_C_LBL_Lyr_Dn_Rgzr.setText(_translate("GUI_LSTM_FORCASTER", "Lyr_Dns_Rgzr_Coeff"))
        self.Model_C_LBL_OptAdam_Co.setText(_translate("GUI_LSTM_FORCASTER", "Optmzer_Adam_Coeff"))
        self.Model_C_LBL_Colums.setText(_translate("GUI_LSTM_FORCASTER", "Colums_N"))
        self.Model_C_LBL_Int_Model.setText(_translate("GUI_LSTM_FORCASTER", "#Int_model"))
        self.Model_C_LBL_BackDays.setText(_translate("GUI_LSTM_FORCASTER", "#BackDays"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.ModCrtion), _translate("GUI_LSTM_FORCASTER", "Model Creation"))
        
    ###########################################
    #              Global Functions           #
    ###########################################
    def UpdateLocalObjects(self):
        
        #### Evaluation tab
        self.EvalForcastTab_UpdateComboxItem()
        self.EvalForcastTab_UpdateComboxModel()
        self.EvalForcastTab_UpdateComboxForcast()
    
        #### Forcasting tab
        self.ForcastingTab_UpdateComboxModel_ID()
        
        #### Tranning tab
        self.TrainningTab_UpdateComboxModel_ID()
        self.TrainningTab_UpdateComboxDataSet_ID()
        
        #### Data Mananer Tab
        self.DataManagerTab_UpdateComboxDataSet_ID()
        self.DataManagerTab_UpdateComboxSeedDataSet_ID()
        
        ####   Model creator tab   ####
        self.ModelTab_UpdateComboBoxModel_ID()
        self.ModelTab_UpdateComboBoxSeedModel_ID()
        
    def GetSpecificForcast(self,Forcast_Id):
        query=("""SELECT * FROM 'Forcasting_Resul' WHERE Forcasting_Resul_id=?""")
        self.Forcaster_DB_c.execute(query, (Forcast_Id,))
        self.SpecificForcast_SLCT_all=self.Forcaster_DB_c.fetchall()
        
    
    def GetMadeUpForcastTableCnsdModel(self,Model):
        query=("""SELECT * FROM 'Forcasting_Resul' WHERE Model_id_FRGN=?""")
        self.Forcaster_DB_c.execute(query, (Model,))
        self.ForcastJointModel_SLCT_all=self.Forcaster_DB_c.fetchall()
        
        
    def GetMadeUpModelTableCnsdItem(self,item):
        query=("""Select * from Models
            JOIN 
            
            (Select DataSet_id,item from DataSet
            JOIN Seed_DataSet ON DataSet.Seed_DataSet_id_FRGN = Seed_DataSet.SeedDataSet_id
            WHERE item=?) as DataSet_SeedDataSet
            
            ON Models.DataSet_id_FRGN = DataSet_SeedDataSet.DataSet_id""")
        
        self.Forcaster_DB_c.execute(query, (item,))
        self.ModelsJointItem_SLCT_all=self.Forcaster_DB_c.fetchall()
    
    def GetMadeUpItemTable(self):
        query="SELECT DISTINCT Item FROM 'Seed_DataSet'"
        self.Forcaster_DB_c.execute(query)
        self.Items_DISTINCT_Item=self.Forcaster_DB_c.fetchall()
    
    def GetModelTable(self):
        query="SELECT * FROM Models"
        self.Forcaster_DB_c.execute(query)
        self.ModelsData_SLCT_all=self.Forcaster_DB_c.fetchall()
    
    def GetSeedDataModel(self):
        query="SELECT * FROM Seed_Model" #This is seed model
        self.Forcaster_DB_c.execute(query)
        self.SeedData_SLCT_all=self.Forcaster_DB_c.fetchall()
        
    def GetDataSetTable(self):
        query="SELECT * FROM DataSet"
        self.Forcaster_DB_c.execute(query)
        self.DataSet_all=self.Forcaster_DB_c.fetchall()
        
    def GetSeed_DataSet(self):
        query="SELECT * FROM Seed_DataSet"
        self.Forcaster_DB_c.execute(query)
        self.SeedDataSet_all=self.Forcaster_DB_c.fetchall()
        
    
    
    ###########################################
    #              TAB Model Creator          #
    ###########################################
    
    ############### Bottons functions  ################
    
    def Create_New_Model(self):
        matching=False
        CurrentSeedDataRow=0
        BackDays=self.Model_C_txtLine_BackDays.text()
        LSTM1_Units=self.Model_C_txtLine_LSTM1.text()
        LSTM2_Units=self.Model_C_txtLine_LSTM2.text()
        LryDcoeff=self.Model_C_txtLine_LryDCoeff.text()
        Lyr_Dns=self.Model_C_txtLine_Lyr_Dns.text()
        Lyr_Dn_Rgzr=self.Model_C_Lyr_Dn_Rgzr.text()
        OptAdam_Co=self.Model_C_txtLine_OptAdam_Co.text()
        Colums=self.Model_C_txtLine_Colums.text()
        
        #Check if seed data already exist
        matching,matching_row=self.Check_Matching_DataSeed(Colums,LSTM1_Units,LSTM2_Units,LryDcoeff,Lyr_Dns,Lyr_Dn_Rgzr,OptAdam_Co,BackDays)
        
        #new seed data is created; if at least a feature has been changed
        if matching==False:
            self.Create_new_DataSeed_DB(Colums,LSTM1_Units,LSTM2_Units,LryDcoeff,Lyr_Dns,Lyr_Dn_Rgzr,OptAdam_Co,BackDays)
            query="SELECT * FROM Seed_Model WHERE Seed_Model_id=(SELECT max(Seed_Model_id) FROM Seed_Model)"
            self.Forcaster_DB_c.execute(query)
            ContentList=self.Forcaster_DB_c.fetchall()
            for i in ContentList: 
                CurrentSeedDataRow=i[0]
            #Adding to Combo Box the data seed just created
            self.AddinElementComoBoxDataSeed()
        else:
            CurrentSeedDataRow=matching_row
        
        #Shows in combo box the current Item in used
        index= self.Model_C_ComBox_Int_Seed_Data.findText(str(CurrentSeedDataRow),QtCore.Qt.MatchFixedString)
        self.Model_C_ComBox_Int_Seed_Data.setCurrentIndex(index) #To set the item, consider (item from 1) (index from 0)    
        
        
        #Model is created (thread)
        query="SELECT * FROM Models WHERE Model_id=(SELECT max(Model_id) FROM Models)"
        self.Forcaster_DB_c.execute(query)
        Last_Model_row=self.Forcaster_DB_c.fetchall()
        if Last_Model_row==[]:
            LastModelRow=0
        else:    
            for j in Last_Model_row: 
                LastModelRow=j[0]
        self.model_creator.Set_Last_model_Crated(LastModelRow)
        
        self.model_creator.Set_SeedParam(CurrentSeedDataRow,LSTM1_Units,LSTM2_Units,LryDcoeff,Lyr_Dns,Lyr_Dn_Rgzr,OptAdam_Co,Colums,BackDays)
        
        self.model_creator.start()
        
    ############ General Fucntions  ############   
    def ModelTab_UpdateComboBoxModel_ID(self):
        #self.Model_C_ComBox_Int_Model.clear() not cleaning up
        self.GetModelTable()
        for i in self.ModelsData_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.Model_C_ComBox_Int_Model.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index<0:
                self.Model_C_ComBox_Int_Model.addItem(str(Current_Row))
            
    
    def ModelTab_UpdateComboBoxSeedModel_ID(self):
        self.GetSeedDataModel()
        for i in self.SeedData_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.Model_C_ComBox_Int_Seed_Data.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index<0:
                self.Model_C_ComBox_Int_Seed_Data.addItem(str(Current_Row))
    
    def ModelsComboBoxChanged(self):
        Model_Selected=self.Model_C_ComBox_Int_Model.currentText()
        
        query="SELECT * FROM Models WHERE Model_id=?"
        
        self.Forcaster_DB_c.execute(query,(Model_Selected,))
        Select_Model=self.Forcaster_DB_c.fetchall()
        print("was called ")
        for i in Select_Model:   
            SeedDataModel=i[4]
        index= self.Model_C_ComBox_Int_Seed_Data.findText(str(SeedDataModel),QtCore.Qt.MatchFixedString)
        self.Model_C_ComBox_Int_Seed_Data.setCurrentIndex(index)  
       
    def SeedDataComboBoxChanged(self):
        Item_Selected=self.Model_C_ComBox_Int_Seed_Data.currentText()
        
        query="SELECT * FROM Seed_Model WHERE Seed_Model_id=?"
        
        self.Forcaster_DB_c.execute(query,(Item_Selected,))
        Select_SeedData=self.Forcaster_DB_c.fetchall()

        for i in Select_SeedData:  
            self.Model_C_txtLine_LSTM1.setText(str(i[2]))
            self.Model_C_txtLine_LSTM2.setText(str(i[3]))
            self.Model_C_txtLine_LryDCoeff.setText(str(i[4]))
            self.Model_C_txtLine_Lyr_Dns.setText(str(i[5]))
            self.Model_C_Lyr_Dn_Rgzr.setText(str(i[6]))
            self.Model_C_txtLine_OptAdam_Co.setText(str(i[7]))
            self.Model_C_txtLine_BackDays.setText(str(i[8]))
            self.Model_C_txtLine_Colums.setText(str(i[1]))
    
    def AddinElementComoBoxDataSeed(self):
        self.UpdateLocalObjects()
    
    def AddinElementComoBoxModelData(self,val1):
        self.Model_C_ComBox_Int_Model.addItem(str(val1))
          
    def Check_Matching_DataSeed(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8):
        Matching=False
        Matching_Row=0
        Matching_Val1=False
        Matching_Val2=False
        Matching_Val3=False
        Matching_Val4=False
        Matching_Val5=False
        Matching_Val6=False
        Matching_Val7=False
        Matching_Val8=False
        
        ##Seed_Data; Getting all data 
        query="SELECT * FROM Seed_Model"
         
        self.Forcaster_DB_c.execute(query)
        All_table_Data=self.Forcaster_DB_c.fetchall()
        
        for i in All_table_Data: 
            Matching_Row=i[0]
            
            if int(i[1])==int(val_1): Matching_Val1=True
            else: Matching_Val1=False

            if int(i[2])==int(val_2): Matching_Val2=True 
            else: Matching_Val2=False
            
            if int(i[3])==int(val_3): Matching_Val3=True 
            else: Matching_Val3=False
            
            if float(i[4])==float(val_4): Matching_Val4=True 
            else: Matching_Val4=False
            
            if int(i[5])==int(val_5): Matching_Val5=True 
            else: Matching_Val5=False
            
            if float(i[6])==float(val_6): Matching_Val6=True 
            else: Matching_Val6=False
            
            if str(i[7])==str(val_7): Matching_Val7=True 
            else: Matching_Val7=False
            
            if str(i[8])==str(val_8): Matching_Val8=True 
            else: Matching_Val8=False

            if Matching_Val1 and Matching_Val2 and Matching_Val3 and Matching_Val4 and Matching_Val5 and Matching_Val6 and Matching_Val7 and Matching_Val8==True:
                Matching=True
                break
            else:
                Matching_Row=0
        
        return Matching,Matching_Row
        
    def Create_new_DataSeed_DB(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8):
        
        query=""" INSERT INTO Seed_Model (Columns_N,LSTM_1_N_Units, LSTM_2_N_Units,Lyr_Drop_Coeff,Lyr_Dns_N_Units,Lyr_Dns_Rgzr_Coeff,Optmzer_Adam_Coeff,BackDays)
         VALUES (?,?,?,?,?,?,?,?)"""

        self.Forcaster_DB_c.execute(query,(val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8)) 
        
        #Validate changes to our DB 
        self.Forcaster_DB_conn.commit()

    def Creare_new_model_in_DB(self,val_1,val_2,val_3,val_4,val_5,val_6):
        
        query=""" INSERT INTO Models (date_Time,Path_Model, N_epochs_Done,Seed_Model_id_FRGN,DataSet_id_FRGN,Colm_T_Predict)
         VALUES (?,?,?,?,?,?)"""
        self.Forcaster_DB_c.execute(query,(val_1,val_2,val_3,val_4,val_5,val_6)) 
        
        #Validate changes to our DB 
        self.Forcaster_DB_conn.commit()

    ##### Emit thread signals
    
    def Event_ModelCreationStatus(self,val):
        date_Time,Path_Model,N_epochs_Done,Seed_Model_id_FRGN,DataSet_id_FRGN,Forcasting_Result_id_FRGN,Colm_T_Predict=self.model_creator.Get_NewModelData()
        NewModelStatus=self.model_creator.GetModelCreationStatus()
        print(NewModelStatus)

        if val:
            self.Creare_new_model_in_DB(date_Time,Path_Model,N_epochs_Done,Seed_Model_id_FRGN,DataSet_id_FRGN,Colm_T_Predict)
            print("Model Created :'D")
            modelJustCreated=self.model_creator.Get_Last_model_Create()+1
            self.AddinElementComoBoxModelData(modelJustCreated)
            index= self.Model_C_ComBox_Int_Model.findText(str(modelJustCreated),QtCore.Qt.MatchFixedString)
            self.Model_C_ComBox_Int_Model.setCurrentIndex(index)
            self.UpdateLocalObjects()
                
    def Event_UpdateProgress_ModelCreator(self,val):
        self.Model_C_LdBar.setProperty("value",val)
                
    def Event_UpdateProgress_string_ModelCreator(self,val): 
        self.Model_C_LBL_Progres.setText(val)
            
       
    ###########################################
    #              TAB Data Manager           #
    ###########################################
    
    ############### Bottons functions  ################   
    def Create_DataSet(self): 
        self.Do_Dataset("1")
        
    def Update_DataSet(self):
        self.Do_Dataset("0")
    
    def Do_Dataset(self,val):
        ProcessToDo=val
        matching=False
        self.DaMa_btn_Create.setEnabled(False)
        self.DaMa_btn_Update.setEnabled(False)
        CurrentSeedDataRow=0
        Item = self.DaMa_txtLine_Stock_Item.text()
        BackDays = self.DaMa_txtLine_BackDay.text()
        
        
        #Getting data from GUI
        if self.DaMa_CheckBox_Open.isChecked():Open_C=1
        else: Open_C=0
        
        if self.DaMa_CheckBox_High.isChecked():High_C=1
        else: High_C=0
        
        if self.DaMa_CheckBox_Low.isChecked():Low_C=1
        else: Low_C=0
        
        if self.DaMa_CheckBox_Close.isChecked():Close_C=1
        else: Close_C=0
        
        if self.DaMa_CheckBox_Volume.isChecked():Volume_C=1
        else: Volume_C=0
        
        if self.DaMa_CheckBox_Open_FFT.isChecked():Open_FFT_C=1
        else:Open_FFT_C=0
        
        if self.DaMa_CheckBox_High_FFT.isChecked(): High_FFT_C=1
        else:High_FFT_C=0
        
        if self.DaMa_CheckBox_Low_FFT.isChecked():Low_FFT_C=1
        else: Low_FFT_C=0
        
        if self.DaMa_CheckBox_Close_FFT.isChecked():Close_FFT_C=1
        else:Close_FFT_C=0
        
        if self.DaMa_CheckBox_Volume_FFT.isChecked(): Volum_FFT_C=1
        else:Volum_FFT_C=0
        
        if self.DaMa_CheckBox_DayNumber.isChecked():Day_Wk_N_C=1
        else:Day_Wk_N_C=0
        
        #if self.DaMa_CheckBox_Month_Number.isChecked():Month_N_C=1
        #else:Month_N_C=0
        
        if self.DaMa_CheckBox_Day_MonthNDay_C.isChecked(): Day_MonthNDay_C=1
        else: Day_MonthNDay_C=0
        
        if self.DaMa_CheckBox_Year.isChecked():Year_C=1
        else:Year_C=0
        
        FFT_Frec = self.DaMa_txtLine_FFT_Frec.text()
        
        DataSetSelected=self.DaMa_ComBox_DataSet_Id.currentText()
        
        #Check if seed data already exist
        matching,matching_row=self.Check_Matching_Seed_DataSet(Item,BackDays,Open_C ,High_C,Low_C,Close_C ,Volume_C,Open_FFT_C ,High_FFT_C ,Low_FFT_C,
                                                           Close_FFT_C ,Volum_FFT_C ,Day_Wk_N_C, Day_MonthNDay_C ,Year_C ,FFT_Frec)
        
        #new seed dataSet is created; if at least a feature has been changed
        if matching==False:
            self.Create_new_SeedDataSet_DB(Item,BackDays,Open_C ,High_C,Low_C,Close_C ,Volume_C,Open_FFT_C ,High_FFT_C ,Low_FFT_C,
                                        Close_FFT_C ,Volum_FFT_C ,Day_Wk_N_C ,Day_MonthNDay_C ,Year_C ,FFT_Frec)
            query="SELECT * FROM Seed_DataSet WHERE SeedDataSet_id=(SELECT max(SeedDataSet_id) FROM Seed_DataSet)"
            self.Forcaster_DB_c.execute(query)
            ContentList=self.Forcaster_DB_c.fetchall()
            for i in ContentList: 
                CurrentSeedDataRow=i[0]
            #Adding to Combo Box the data seed just created
            self.AddinElementComoBoxSeed_DataSet()
        else:
            CurrentSeedDataRow=matching_row
        
        #Shows in combo box the current Item in used
        index= self.DaMa_ComBox_Seed_DataSet.findText(str(CurrentSeedDataRow),QtCore.Qt.MatchFixedString)
        self.DaMa_ComBox_Seed_DataSet.setCurrentIndex(index) #To set the item, consider (item from 1) (index from 0)
        
        
        #DataSet is created (thread)
        query="SELECT * FROM DataSet WHERE DataSet_id=(SELECT max(DataSet_id) FROM DataSet)"
        self.Forcaster_DB_c.execute(query)
        Last_DataSet_row=self.Forcaster_DB_c.fetchall()
        
        if Last_DataSet_row==[]:
            LastDataSetRow=0
        else:    
            for j in Last_DataSet_row: 
                LastDataSetRow=j[0]
                
        #SeedData 
        query="SELECT * FROM Seed_DataSet WHERE SeedDataSet_id=?"
        self.Forcaster_DB_c.execute(query,(CurrentSeedDataRow,))
        Last_SetDataSet_row=self.Forcaster_DB_c.fetchall()[0]
        
        
        #Set the last dataset row
        self.DataSet_creator.Set_Last_DataSet_Crated(LastDataSetRow)
        
        self.DataSet_creator.Set_SeedParam(Last_SetDataSet_row)
        
        self.DataSet_creator.Set_DataSetToUpdate(DataSetSelected)
        self.DataSet_creator.Set_TypeProcessToDo(ProcessToDo) #Process do to (Create a new dataset "1" or update one "0")
        
        self.DataSet_creator.Set_BackDaysConsideredFFT(int(BackDays))
        
        self.DataSet_creator.start()
    
    ############ General Fucntions  ############
    def DataManagerTab_UpdateComboxDataSet_ID(self):
        #self.DaMa_ComBox_DataSet_Id.clear() #When starting app, combobox is updated
        self.GetDataSetTable()
        for i in self.DataSet_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.DaMa_ComBox_DataSet_Id.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.DaMa_ComBox_DataSet_Id.addItem(str(Current_Row))
            
        #self.SeedDataSetComboBoxChanged() 
        
    def DataManagerTab_UpdateComboxSeedDataSet_ID(self):
        #self.DaMa_ComBox_Seed_DataSet.clear() #When starting app, combobox is updated
        self.GetSeed_DataSet()
        for i in self.SeedDataSet_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.DaMa_ComBox_Seed_DataSet.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.DaMa_ComBox_Seed_DataSet.addItem(str(Current_Row))
            
        #self.SeedDataSetComboBoxChanged() 
        
    def DataSetComboBoxChanged(self):
        DatasSet_Selected=self.DaMa_ComBox_DataSet_Id.currentText()
        query="SELECT * FROM DataSet WHERE DataSet_id=?"
        
        self.Forcaster_DB_c.execute(query,(DatasSet_Selected,))
        Select_DataSet=self.Forcaster_DB_c.fetchall()
    
        for i in Select_DataSet:
            Date_Time_DataSet=i[1]
            Path_DataSet=i[2]
            SeedDataSet=i[3]    
    
        self.DaMa_txtLine_DateTime.setText(str(Date_Time_DataSet))
        self.DaMa_txtLine_PathCSV_File.setText(str(Path_DataSet))
        index= self.DaMa_ComBox_Seed_DataSet.findText(str(SeedDataSet),QtCore.Qt.MatchFixedString)
        self.DaMa_ComBox_Seed_DataSet.setCurrentIndex(index)
    
    def SeedDataSetComboBoxChanged(self):
        Item_Selected=self.DaMa_ComBox_Seed_DataSet.currentText()
        
        query="SELECT * FROM Seed_DataSet WHERE SeedDataSet_id=?"
        
        self.Forcaster_DB_c.execute(query,(Item_Selected,))
        Select_SeedDataSet=self.Forcaster_DB_c.fetchall()
        
        #Setting data to GUI
        for i in Select_SeedDataSet:  
            self.DaMa_txtLine_Stock_Item.setText(str(i[1]))
            self.DaMa_txtLine_BackDay.setText(str(i[2]))
            
            # data from GUI
            if i[3]==1:self.DaMa_CheckBox_Open.setChecked(True)
            else:self.DaMa_CheckBox_Open.setChecked(False)
            
            if i[4]==1:self.DaMa_CheckBox_High.setChecked(True)
            else: self.DaMa_CheckBox_High.setChecked(False)
            
            if i[5]==1:self.DaMa_CheckBox_Low.setChecked(True)
            else: self.DaMa_CheckBox_Low.setChecked(False)
            
            if i[6]==1:self.DaMa_CheckBox_Close.setChecked(True)
            else: self.DaMa_CheckBox_Close.setChecked(False)
            
            if i[7]==1:self.DaMa_CheckBox_Volume.setChecked(True)
            else: self.DaMa_CheckBox_Volume.setChecked(False)
            
            if i[8]==1:self.DaMa_CheckBox_Open_FFT.setChecked(True)
            else:self.DaMa_CheckBox_Open_FFT.setChecked(False)
            
            if i[9]==1: self.DaMa_CheckBox_High_FFT.setChecked(True)
            else:self.DaMa_CheckBox_High_FFT.setChecked(False)
            
            if i[10]==1:self.DaMa_CheckBox_Low_FFT.setChecked(True)
            else: self.DaMa_CheckBox_Low_FFT.setChecked(False)
            
            if i[11]==1:self.DaMa_CheckBox_Close_FFT.setChecked(True)
            else:self.DaMa_CheckBox_Close_FFT.setChecked(False)
            
            if i[12]==1: self.DaMa_CheckBox_Volume_FFT.setChecked(True)
            else:self.DaMa_CheckBox_Volume_FFT.setChecked(False)
            
            if i[13]==1:self.DaMa_CheckBox_DayNumber.setChecked(True)
            else:self.DaMa_CheckBox_DayNumber.setChecked(False)
            
            #if i[14]==1:self.DaMa_CheckBox_Month_Number.setChecked(True)
            #else:self.DaMa_CheckBox_Month_Number.setChecked(False)
            
            if i[14]==1: self.DaMa_CheckBox_Day_MonthNDay_C.setChecked(True)
            else: self.DaMa_CheckBox_Day_MonthNDay_C.setChecked(False)
            
            if i[15]==1:self.DaMa_CheckBox_Year.setChecked(True)
            else:self.DaMa_CheckBox_Year.setChecked(False)
            
            self.DaMa_txtLine_FFT_Frec.setText(str(i[16]))
              
    def AddinElementComoBoxSeed_DataSet(self):
        self.UpdateLocalObjects()
        #self.DaMa_ComBox_Seed_DataSet.addItem(str(val1))
        
    def AddinElementComoBoxData_Set(self):
        self.UpdateLocalObjects()
        #self.DaMa_ComBox_DataSet_Id.addItem(str(val1))
        
    def Check_Matching_Seed_DataSet(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,
                                    val_9,val_10,val_11,val_12,val_13,val_14,val_15,val_16):
        Matching=False
        Matching_Row=0
        Matching_Val1=False
        Matching_Val2=False
        Matching_Val3=False
        Matching_Val4=False
        Matching_Val5=False
        Matching_Val6=False
        Matching_Val7=False
        Matching_Val8=False
        Matching_Val9=False
        Matching_Val10=False
        Matching_Val11=False
        Matching_Val12=False
        Matching_Val13=False
        Matching_Val14=False
        Matching_Val15=False
        Matching_Val16=False
        
        ##Seed_Data; Getting all data 
        query="SELECT * FROM Seed_DataSet"
         
        self.Forcaster_DB_c.execute(query)
        All_table_Data=self.Forcaster_DB_c.fetchall()
        
        for i in All_table_Data: 
            Matching_Row=i[0]
            
            if str(i[1])==str(val_1): Matching_Val1=True
            else: Matching_Val1=False

            if int(i[2])==int(val_2): Matching_Val2=True 
            else: Matching_Val2=False
            
            if int(i[3])==int(val_3): Matching_Val3=True 
            else: Matching_Val3=False
            
            if int(i[4])==int(val_4): Matching_Val4=True 
            else: Matching_Val4=False
            
            if int(i[5])==int(val_5): Matching_Val5=True 
            else: Matching_Val5=False
            
            if int(i[6])==int(val_6): Matching_Val6=True 
            else: Matching_Val6=False
            
            if int(i[7])==int(val_7): Matching_Val7=True 
            else: Matching_Val7=False
            
            if int(i[8])==int(val_8): Matching_Val8=True 
            else: Matching_Val8=False
            
            if int(i[9])==int(val_9): Matching_Val9=True 
            else: Matching_Val9=False
            
            if int(i[10])==int(val_10): Matching_Val10=True 
            else: Matching_Val10=False
            
            if int(i[11])==int(val_11): Matching_Val11=True 
            else: Matching_Val11=False
            
            if int(i[12])==int(val_12): Matching_Val12=True 
            else: Matching_Val12=False
            
            if int(i[13])==int(val_13): Matching_Val13=True 
            else: Matching_Val13=False
            
            if int(i[14])==int(val_14): Matching_Val14=True 
            else: Matching_Val14=False
            
            if int(i[15])==int(val_15): Matching_Val15=True 
            else: Matching_Val15=False
            
            if str(i[16])==str(val_16): Matching_Val16=True 
            else: Matching_Val16=False
            

            if (Matching_Val1 and Matching_Val2 and Matching_Val3 and Matching_Val4 and Matching_Val5 and Matching_Val6 and Matching_Val7 and Matching_Val8
                and Matching_Val9 and Matching_Val10 and Matching_Val11 and Matching_Val12 and Matching_Val13 and Matching_Val14 and Matching_Val15 and 
                Matching_Val16):
                Matching=True
                break
            else:
                Matching_Row=0
        
        return Matching,Matching_Row
        
    def Create_new_SeedDataSet_DB(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,
                                    val_9,val_10,val_11,val_12,val_13,val_14,val_15,val_16):
        
        query=""" INSERT INTO Seed_DataSet (Item,BackDays,Open_C ,High_C,Low_C,Close_C ,Volume_C,Open_FFT_C ,High_FFT_C ,Low_FFT_C,
                                        Close_FFT_C ,Volum_FFT_C ,Day_Wk_N_C, Day_MonthNDay_C ,Year_C ,FFT_Frec)
         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""

        self.Forcaster_DB_c.execute(query,(val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,
                                    val_10,val_11,val_12,val_13,val_14,val_15,val_16)) 
        
        #Validate changes to our DB 
        self.Forcaster_DB_conn.commit()
        
    def Creare_new_DataSet_in_DB(self,val_1,val_2,val_3):
        """Date_Time TEXT,
            Path_DataSet TEXT,
            Seed_DataSet_id_FRGN INTEGER"""
        
        query=""" INSERT INTO DataSet (Date_Time,Path_DataSet,Seed_DataSet_id_FRGN)
         VALUES (?,?,?)"""

        self.Forcaster_DB_c.execute(query,(val_1,val_2,val_3)) 
        
        #Validate changes to our DB 
        self.Forcaster_DB_conn.commit()
    
    def Update_DataSet_in_DB(self,DataSetToUpdate,Date_Time):
        query="UPDATE DataSet SET Date_Time = ? WHERE DataSet_id=?"
        self.Forcaster_DB_c.execute(query,(Date_Time,DataSetToUpdate))
        self.Forcaster_DB_conn.commit()
        
    ##### Emit thread signals
    
    def Event_DataSetCreationStatus(self,val):
        Date_Time,Path_DataSet,Seed_DataSet_id_FRGN=self.DataSet_creator.Get_NewDataSet_Data()
        
        DataSetToUpdate=self.DataSet_creator.Get_DataSetToUpdate()
        Proces_done=self.DataSet_creator.Get_TypeProcessToDo()
        if val:
            if Proces_done=="1":
                self.Creare_new_DataSet_in_DB(Date_Time,Path_DataSet,Seed_DataSet_id_FRGN)
                print("DataSet Created :'D")
            else:
                DataSetToUpdate
                self.Update_DataSet_in_DB(DataSetToUpdate,Date_Time)
                print("DataSet updated :'D")
            self.DaMa_btn_Create.setEnabled(True)
            self.DaMa_btn_Update.setEnabled(True)
            DataSetJustCreated=self.DataSet_creator.Get_DataSet_id_Just_Created()
            self.AddinElementComoBoxData_Set()
            index= self.DaMa_ComBox_DataSet_Id.findText(str(DataSetJustCreated),QtCore.Qt.MatchFixedString)
            self.DaMa_ComBox_DataSet_Id.setCurrentIndex(index)
            self.UpdateLocalObjects()
            
    def Event_UpdateProgress_DataSetCreator(self,val):
         self.DaMa_LoadBar_Progres.setProperty("value",val)
    
    def Event_UpdateProgress_string_DataSetCreator(self,val):
        self.DaMa_Lbl_Progres.setText(val)
        
        
    ###########################################
    #           TAB Model Trainning           #
    ###########################################
    
    ############### Bottons functions  ################ 
    def Start_Trainning(self):
        
        #Getting data form GUI
        self.Current_Trainning_Id_modelSelect=self.MoTr_ComBox_ChooseModel.currentText()
        Colum_To_Predict=self.MoTr_ComBox_Column_T_Predict.currentText()
        DataSet_Id=self.MoTr_ComBox_DataSet.currentText()
        N_Epohc=self.MoTr_txtLine_ephocs.text()
        N_PercentData=self.MoTr_txtLine_PercentDataSet.text()        
        
        ## Getting the DB row model 
        query="SELECT * FROM Models WHERE Model_id=?"
        self.Forcaster_DB_c.execute(query,(self.Current_Trainning_Id_modelSelect,))
        Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        ModelPath=Model_Selected_Row[2]
        DataSetMarried=int(Model_Selected_Row[5])
        ColmTPredictMarried=int(Model_Selected_Row[6])
        
        Columns_Index=self.Mapping_DataSetColums(DataSet_Id,Colum_To_Predict,True)
        
        print("this is de colums Index to predict")
        print(Columns_Index)
        
        #Missing to do a mapping DataSetMarried and COlumns to predrict
        
        #in case not dataset and column married to model 
        if DataSetMarried==0 and ColmTPredictMarried==0:
            query="UPDATE Models SET DataSet_id_FRGN = ?,Colm_T_Predict=? WHERE Model_id=?"
            self.Forcaster_DB_c.execute(query,(DataSet_Id,Columns_Index,self.Current_Trainning_Id_modelSelect))
            self.Forcaster_DB_conn.commit()
        else:
            print("This model is already married to a Dataset and a Column ")
            
        ## Getting the DB row DataSet 
        query="SELECT * FROM DataSet WHERE DataSet_id=?"
        self.Forcaster_DB_c.execute(query,(DataSet_Id,))
        DataSet_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        dataSetPath=DataSet_Selected_Row[2]
        dataSetSeed=str(DataSet_Selected_Row[3])
        
        ## Getting the DB row seed DataSet 
        query="SELECT * FROM Seed_DataSet WHERE SeedDataSet_id=?"
        self.Forcaster_DB_c.execute(query,(dataSetSeed,))
        SeedDataSet_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        DataSetBackDays=SeedDataSet_Selected_Row[2]
        
        self.trainner.SetColumToForcast(Columns_Index) #from function mappe colum considering the data set
        self.trainner.SetnumEpochs(N_Epohc) #from GUI direct
        self.trainner.SetModel_Path(ModelPath) #from DB model
        self.trainner.SetData_CSV(dataSetPath) #From DB DataSet
        self.trainner.SetpercentageData(N_PercentData) # directly from gui
        self.trainner.SetNp_pasdays(DataSetBackDays) #from data set choosed - from ** Seed dataset **
        self.trainner.start()
    
    def Cancel_Trainning(self):   
        #This button may also breake the data set and columns marriage
        pass 
    
    ############ General Fucntions  ############
    
    def TrainningTab_UpdateComboxModel_ID(self):
        #self.MoTr_ComBox_ChooseModel.clear()
        self.GetModelTable()
        for i in self.ModelsData_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.MoTr_ComBox_ChooseModel.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.MoTr_ComBox_ChooseModel.addItem(str(Current_Row))
            
            
    def TrainningTab_UpdateComboxDataSet_ID(self):
        #self.MoTr_ComBox_DataSet.clear()
        self.GetDataSetTable()
        for i in self.DataSet_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.MoTr_ComBox_DataSet.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.MoTr_ComBox_DataSet.addItem(str(Current_Row))
                
    def Mapping_DataSetColums(self,DataSetId,ColumnSelected,InputName_Chose):
        
        ## if inputName_Chose true the return value is an int index
        ## if false return value is a string column name value  
        
        ## Getting the DB row DataSet 
        query="SELECT * FROM DataSet WHERE DataSet_id=?"
        self.Forcaster_DB_c.execute(query,(DataSetId,))
        Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        DataSetPath=Model_Selected_Row[2]
        
        all_df=pd.read_csv(DataSetPath,index_col=0)
        ColumnsList=all_df.columns
        
        if InputName_Chose:
        
            Colum=0
            for i in ColumnsList:
                if ColumnSelected == i:
                    break
                Colum+=1
        else:
            Colum=""
            Colum=str(ColumnsList[ColumnSelected])
        return Colum
    
            
        ## Need to get the data set path using the DB with DataSet_Id then
        ## Need to get the data in a pandas data frame Then
        ## Map the colum possition using Colum_To_Predict 
            
    ##### Emit general signals
    def Model_To_Train_ComboBoxChanged(self):
        Id_modelSelect=self.MoTr_ComBox_ChooseModel.currentText()
        Colum_To_Predict=self.MoTr_ComBox_Column_T_Predict.currentText()
        DataSet_Id=self.MoTr_ComBox_DataSet.currentText()
        print(Id_modelSelect)
        print(type(Id_modelSelect))
        ## Getting the DB row model 
        query="SELECT * FROM Models WHERE Model_id=?"
        self.Forcaster_DB_c.execute(query,(Id_modelSelect,))
        Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        ephocs_done=str(Model_Selected_Row[3])
        DataSetMarried=int(Model_Selected_Row[5])
        ColmTPredictMarried=int(Model_Selected_Row[6])
        try:
            loss=float(Model_Selected_Row[7])
            mean_squared_error=float(Model_Selected_Row[8])
            val_loss=float(Model_Selected_Row[9])
            val_mean_squared_error=float(Model_Selected_Row[10])
        except:
            loss=0
            mean_squared_error=0
            val_loss=0
            val_mean_squared_error=0
            
        self.MoTr_txtLine_ephocs_done.setText(ephocs_done)
        
        self.MoTr_txtLine_loss.setText('%.2E'%loss)
        self.MoTr_txtLine_mean_sqr_error.setText('%.2E'%mean_squared_error)
        self.MoTr_txtLine_val_loss.setText('%.2E'%val_loss)
        self.MoTr_txtLine_val_mean_sqr_error.setText('%.2E'%val_mean_squared_error)

        
        if DataSetMarried>0:
            ### if has already a DataSet married to, let's bring it on
            index= self.MoTr_ComBox_DataSet.findText(str(DataSetMarried),QtCore.Qt.MatchFixedString)
            self.MoTr_ComBox_DataSet.setCurrentIndex(index)
            
            
        if ColmTPredictMarried>0:
            ### if has already a Colum to predict married to, let's bring it on
            Column_Name=self.Mapping_DataSetColums(DataSetMarried,ColmTPredictMarried,False)
            print(Column_Name)
            index= self.MoTr_ComBox_Column_T_Predict.findText(str(Column_Name),QtCore.Qt.MatchFixedString)
            self.MoTr_ComBox_Column_T_Predict.setCurrentIndex(index)
        
    
    ##### Emit thread signals
    
    def Event_TrainningStatus(self,val):
        losses=self.trainner.Getlosses()
        epochs_done=int(self.trainner.GetEpochs_done())
        Id_modelSelect=self.Current_Trainning_Id_modelSelect
        last_loss=self.trainner.Get_LastLoss()
        mean_squared_error=self.trainner.Get_LastMean_Squared_error()
        val_loss=self.trainner.Get_LastValLoss()
        val_mean_squared_error=self.trainner.Get_LastValMeanSquared_Error()
        
        
        
        if val:
            #Update the N_epoch done
                #Get the N epochs done in bd
            query="SELECT * FROM Models WHERE Model_id=?"
            self.Forcaster_DB_c.execute(query,(Id_modelSelect,))
            Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
            
            ephocs_in_Bd=int(Model_Selected_Row[3])
                
                # add saved ephos done + new done epochs
            Total_Epochs_done=ephocs_in_Bd+epochs_done
            
            #Update training result values
            last_loss=self.trainner.Get_LastLoss()
            mean_squared_error=self.trainner.Get_LastMean_Squared_error()
            val_loss=self.trainner.Get_LastValLoss()
            val_mean_squared_error=self.trainner.Get_LastValMeanSquared_Error()
                # save in bd
            query="UPDATE Models SET N_epochs_Done = ?,loss=?,mean_squared_error=?,val_loss=?,val_mean_squared_error=? WHERE Model_id=?"
            #query="UPDATE Models SET N_epochs_Done = ? WHERE Model_id=?"
            #self.Forcaster_DB_c.execute(query,(Total_Epochs_done,Id_modelSelect))
            print(mean_squared_error)
            self.Forcaster_DB_c.execute(query,(Total_Epochs_done,last_loss,mean_squared_error,val_loss,val_mean_squared_error,Id_modelSelect))
            self.Forcaster_DB_conn.commit()
            
            ## Getting the DB row model 
            query="SELECT * FROM Models WHERE Model_id=?"
            self.Forcaster_DB_c.execute(query,(Id_modelSelect,))
            Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
            ephocs_done=str(Model_Selected_Row[3])
            try:
                loss=float(Model_Selected_Row[7])
                mean_squared_error=float(Model_Selected_Row[8])
                val_loss=float(Model_Selected_Row[9])
                val_mean_squared_error=float(Model_Selected_Row[10])
            except:
                loss=0
                mean_squared_error=0
                val_loss=0
                val_mean_squared_error=0

            self.MoTr_txtLine_ephocs_done.setText(ephocs_done)
            self.MoTr_txtLine_loss.setText('%.2E'%loss)
            self.MoTr_txtLine_mean_sqr_error.setText('%.2E'%mean_squared_error)
            self.MoTr_txtLine_val_loss.setText('%.2E'%val_loss)
            self.MoTr_txtLine_val_mean_sqr_error.setText('%.2E'%val_mean_squared_error)
            
            #Show the loss plot
            losses.plot()
            plt.show()
            
            #Save plot
            
    
    def Event_UpdateProgress_TrainningProcess(self,val):
        self.MoTr_LoadBar_CMDTraining.setProperty("value",val)
    
    def Event_UpdateProgress_string_Trainning_Process(self,val):
        self.MoTr_lbl_CMD_training.setText(val)
    
    ###########################################
    #           TAB Model Forcasting          #
    ###########################################
    
    ############### Bottons functions  ################ 
    def Start_Forcasting(self):
        ## Getting data from GUI
        Model_To_use = self.ForC_ComBox_Model_To_used.currentText()
        Back_Days_To_Do= self.ForC_txtLine_TailBackDays.text()
        Data_Precentage= self.ForC_txtLine_DataPrecentage.text()
        
        FFTwereUsed=False #To define if FFT columns existe in Dataset, this is because first 5 rows are lost to generated them 
        
        #Getting the Model table
        query="SELECT * FROM Models WHERE Model_id=?"
        self.Forcaster_DB_c.execute(query,(Model_To_use,))
        Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        Path_DataSet=Model_Selected_Row[2]
        DataSet_Id=int(Model_Selected_Row[5])
        ColumToForcast=int(Model_Selected_Row[6])

        
        #Getting the DataSet Table
        query="SELECT * FROM DataSet WHERE DataSet_id=?"
        self.Forcaster_DB_c.execute(query,(DataSet_Id,))
        Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        DataSet_Path=Model_Selected_Row[2]
        SeedDataSet_id=int(Model_Selected_Row[3])
        
        #Getting the Seed DataSet table
        query="SELECT * FROM Seed_DataSet WHERE SeedDataSet_id=?"
        self.Forcaster_DB_c.execute(query,(SeedDataSet_id,))
        Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        ItemName=Model_Selected_Row[1]
        BackDays=Model_Selected_Row[2]
        Open_FFT_C=int(Model_Selected_Row[8])
        High_FFT_C=int(Model_Selected_Row[9])
        Low_FFT_C=int(Model_Selected_Row[10])
        Close_FFT_C=int(Model_Selected_Row[11])
        Volum_FFT_C=int(Model_Selected_Row[12])
        
        #Getting the Forcast table
        query="SELECT Forcasting_Resul_id FROM Forcasting_Resul WHERE Forcasting_Resul_id=(SELECT max(Forcasting_Resul_id) FROM Forcasting_Resul)"
        self.Forcaster_DB_c.execute(query)
        Forcast_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        LastForcas=Forcast_Selected_Row[0]
        LastForcasPlusOne=str(LastForcas+1)
        
        
        
        #ANswering question, there are FFT columns in DataSet?
        if (Open_FFT_C==1) or (High_FFT_C==1) or (Low_FFT_C==1)or(Close_FFT_C==1) or (Volum_FFT_C==1):FFTwereUsed=True
        else:FFTwereUsed=False
        
        
        #Defining Path files 
        if self.InstallerVersionActive:
            FolderForcastpath="GUI_FFT_LSTM_Stock/ModelForcast/"+ItemName+"/"+"Model_"+Model_To_use+"/"+"Forcast_"+LastForcasPlusOne+"/"
        else:
            FolderForcastpath="APP/ModelForcast/"+ItemName+"/"+"Model_"+Model_To_use+"/"+"Forcast_"+LastForcasPlusOne+"/"
        
        if path.exists(FolderForcastpath):
            pass
        else:
            os.makedirs(FolderForcastpath)
        

        ForcastPath=FolderForcastpath+"ForcastDataSet.csv"
        if self.InstallerVersionActive:
            BaseDataSet="GUI_FFT_LSTM_Stock/DataSets/"+ItemName+"/Id"+str(DataSet_Id)+"/BaseDataSet.csv"
        else:
            BaseDataSet="APP/DataSets/"+ItemName+"/Id"+str(DataSet_Id)+"/BaseDataSet.csv"
        TrendImage_path=FolderForcastpath+"TrendImage.png"
        
        #To create folde if doesnt' exist

        
        #Data need to be able to forcast
        self.Forcaster.Set_Model_id_Used(Model_To_use)
        self.Forcaster.Set_ModelPath(Path_DataSet)
        self.Forcaster.Set_data_frame_Path(DataSet_Path) 
        self.Forcaster.Set_ColumToforcast(ColumToForcast)
        self.Forcaster.Set_all_colums_Data_CSV(BaseDataSet)
        self.Forcaster.Set_backdaysConsideredToBForcasted(int(Back_Days_To_Do)) #GUI
        self.Forcaster.Set_BackDays(int(BackDays)) ## From DB table model
        self.Forcaster.Set_percentageData(int(Data_Precentage)) #GUI
        self.Forcaster.Set_FFtUsedQ(FFTwereUsed) # From DB tbale "model" then table "DataSet" then "Seed_DataSet" if FFT used True else False
        self.Forcaster.Set_forcastPath(ForcastPath)
        self.Forcaster.Set_TrendImagePath(TrendImage_path)
        
        self.Forcaster.start()
    
    ############ General Fucntions  ###########
    def ForcastingTab_UpdateComboxModel_ID(self):
        self.GetModelTable()
        for i in self.ModelsData_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.ForC_ComBox_Model_To_used.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.ForC_ComBox_Model_To_used.addItem(str(Current_Row))
    
    
    def CreatNewForcasting(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,val_12,val_13,val_14,val_15,val_16):

        query=""" INSERT INTO Forcasting_Resul (Date_time,Total_Movement_Right,Total_Movement_Right_Per100,
        Rows_Considered,Total_Diff_Mag_earned,Total_Diff_earned_Per100,Total_Diff_Mag_lose,Total_Diff_lose_Per100,
        Total_Mag_Mvmnts,Real_Mag_earned,Real_earned_Per100,Real_earned_Per100,Model_id_FRGN,Path_Forcast,Total_Mag_Mvmnts_Per100,
        EvalForcastPath)
         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""
        self.Forcaster_DB_c.execute(query,(val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,val_12,val_13,val_14,val_15,val_16)) 
        
        #Validate changes to our DB 
        self.Forcaster_DB_conn.commit()
    
    ##### Emit general signals
    def Model_ForcastWith_ComboBoxChanged(self):
        Model_To_use = self.ForC_ComBox_Model_To_used.currentText()
        #Getting the Model table
        query="SELECT * FROM Models WHERE Model_id=?"
        self.Forcaster_DB_c.execute(query,(Model_To_use,))
        Model_Selected_Row=self.Forcaster_DB_c.fetchall()[0]
        
        epochs_done=int(Model_Selected_Row[3])
        DataSet_Married_to=int(Model_Selected_Row[5])
        
        if (epochs_done>0) and (DataSet_Married_to>0):
            self.ForC_btn_StartForcasting.setEnabled(True)
        else:
            self.ForC_btn_StartForcasting.setEnabled(False) 
    
    ##### Emit thread signals
    def Event_ForcastingStatus(self,val):
        val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,val_12,val_13,val_14,val_15,val_16=self.Forcaster.Get_NewForcastingData()
        TrendImage_path=self.Forcaster.Get_TrendImageForcast()
        ToGetTheGraph=self.ForC_radioButton_GetGraph.isChecked()
        if val:
            #Saving Data
            self.CreatNewForcasting(val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,val_12,val_13,val_14,val_15,val_16)
            ColumsDataForcasted=self.Forcaster.Get_ColumForcast()
            ColumsDataReal=self.Forcaster.Get_ColumReal()
            
            TodayPrice_value=ColumsDataForcasted[len(ColumsDataReal)-2:][0]
            TomorrowPrice_Value=ColumsDataForcasted[len(ColumsDataForcasted)-2:][1]

            
            self.ForC_lbl_TodayPrice.setText(str(TodayPrice_value)[:7])
            self.ForC_lbl_TomorrowPrice.setText(str(TomorrowPrice_Value)[:7])
            
            if TodayPrice_value > TomorrowPrice_Value:
                resultForcast="Down"
            elif TodayPrice_value == TomorrowPrice_Value:
                resultForcast="same"
            else:
                resultForcast="Up"
            self.ForC_Gbox_ForcastResul.setTitle("Forcast Result Close: price:"+resultForcast)
            
            if ToGetTheGraph:
                plt.plot(ColumsDataForcasted,label='ColumnForcast_Close_Day',color='orange', marker='o')
                plt.plot(ColumsDataReal,label='ColumnReal_Close_Day',color='green', marker='*')
                try:
                    plt.savefig(TrendImage_path,pad_inches=0.1)
                except:
                    self.Event_UpdateProgress_string_Forcasting_Process("Was not possible to save forcast image")    
                plt.show()
            
        
    def Event_UpdateProgress_ForcastingProcess(self,val):
        self.ForC_Loadbar_Forcast.setProperty("value",val)
        
    
    def Event_UpdateProgress_string_Forcasting_Process(self,val):
        self.ForC_lbl_loadBar.setText(val)
        
    ###########################################
    #          TAB Forcast Evaluator          #
    ###########################################
    
    ############### Bottons functions  ################
    def Start_Evaluation(self):
        item=self.ForcastEval_Combox_ChooseItem.currentText()
        model=self.ForcastEval_Combox_ChooseModel.currentText()
        Current_Forcast=self.ForcastEval_Combox_Chooseforcast.currentText()
        
        
        self.Evaluator.Set_selectedItem(item)
        self.Evaluator.Set_selectedModel(model)
        self.Evaluator.Set_selectedForcastId(Current_Forcast)
        
        self.GetSpecificForcast(Current_Forcast)    
        ForcastPath=""
        for i in self.SpecificForcast_SLCT_all:
            ForcastPath=i[13]
        self.Evaluator.Set_ForcastPath(ForcastPath)
        
        self.Evaluator.start()
    
    def Delete_Forcast(self):
        print("Function to delete forcast")
    
    ############ General Fucntions  ###########
    def EvalForcastTab_UpdateComboxItem(self):
        self.GetMadeUpItemTable()
        for i in self.Items_DISTINCT_Item: #ComboBox is updated
            Current_Row=i[0]
            index= self.ForcastEval_Combox_ChooseItem.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.ForcastEval_Combox_ChooseItem.addItem(str(Current_Row))
    
    def EvalForcastTab_UpdateComboxModel(self):
        Current_Item=self.ForcastEval_Combox_ChooseItem.currentText()
        self.GetMadeUpModelTableCnsdItem(Current_Item) #Table that contain model linked to item x
        for i in self.ModelsJointItem_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.ForcastEval_Combox_ChooseModel.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.ForcastEval_Combox_ChooseModel.addItem(str(Current_Row))
    
    def EvalForcastTab_UpdateComboxForcast(self):
        Current_Model=self.ForcastEval_Combox_ChooseModel.currentText()
        self.GetMadeUpForcastTableCnsdModel(Current_Model) #Table that contain model linked to item x
        for i in self.ForcastJointModel_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            index= self.ForcastEval_Combox_Chooseforcast.findText(str(Current_Row),QtCore.Qt.MatchFixedString)
            if index==-1:
                self.ForcastEval_Combox_Chooseforcast.addItem(str(Current_Row))
    
    def SetDataEvlForcasting(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,Forcast_ID,Eval_ForcastPath):

        query=""" UPDATE Forcasting_Resul SET Total_Movement_Right=?,Total_Movement_Right_Per100=?,
        Rows_Considered=?,Total_Diff_Mag_earned=?,Total_Diff_earned_Per100=?,Total_Diff_Mag_lose=?,Total_Diff_lose_Per100=?,
        Total_Mag_Mvmnts=?,Real_Mag_earned=?,Real_earned_Per100=?,Total_Mag_Mvmnts_Per100=?,EvalForcastPath=?
        Where Forcasting_Resul_id=?"""
        self.Forcaster_DB_c.execute(query,(val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,Eval_ForcastPath,Forcast_ID,)) 
        
        #Validate changes to our DB 
        self.Forcaster_DB_conn.commit()
        
    ##### Emit general signals
    def item_evalForcast_ComboBoxChanged(self):
        self.ForcastEval_Combox_ChooseModel.clear()
        self.EvalForcastTab_UpdateComboxModel()
        self.EvalForcastTab_UpdateComboxForcast()
        
    def model_evalFolcast_ComboBoxChanged(self):
        self.ForcastEval_Combox_Chooseforcast.clear()
        self.EvalForcastTab_UpdateComboxForcast()
        
    def Forcast_evalFolcast_ComboBoxChanged(self):
        Current_Forcast=self.ForcastEval_Combox_Chooseforcast.currentText()
        self.GetSpecificForcast(Current_Forcast)

        ForcastPath=""
        for i in self.SpecificForcast_SLCT_all:
            ForcastPath=i[13]
        print(ForcastPath)
        try:
            df=pd.read_csv(ForcastPath, index_col=0)
            print(df.shape)
            self.ForcastEval_txtLine_ShowShape.setText(str(df.shape)) 
        except:
            self.ForcastEval_txtLine_ShowShape.setText("") 
            print("An error occure trying to retrive the forcast dataSet ")
             
    ##### Emit thread signals
    def Event_EvaluationStatus(self,val):
        val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,Forcast_Id,Eval_ForcastPath=self.Evaluator.Get_All_DataDB()
        Current_Forcast=self.ForcastEval_Combox_Chooseforcast.currentText()
        
        if val:
            #Saving Data
            self.SetDataEvlForcasting(val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8,val_9,val_10,val_11,Forcast_Id,Eval_ForcastPath)
            
            #Get data from Db to show in line boxes
            self.GetSpecificForcast(Current_Forcast)
            print(len(self.SpecificForcast_SLCT_all))
    
            
            self.ForcastEval_txtLine_TotalRight.setText(str(self.SpecificForcast_SLCT_all[0][2]))
            self.ForcastEval_txtLine_RigthPercent.setText(str(self.SpecificForcast_SLCT_all[0][3])) 
            self.ForcastEval_txtLine_RowsConsidered.setText(str(self.SpecificForcast_SLCT_all[0][4]))
            
            self.ForcastEval_txtLine_TotalDiffEarned.setText(str(self.SpecificForcast_SLCT_all[0][5]))
            self.ForcastEval_txtLine_diffEarnedPercent.setText(str(self.SpecificForcast_SLCT_all[0][6]))
            
            self.ForcastEval_txtLine_TotalDiffLose.setText(str(self.SpecificForcast_SLCT_all[0][7]))
            self.ForcastEval_txtLine_diffLosePercent.setText(str(self.SpecificForcast_SLCT_all[0][8]))
            
            self.ForcastEval_txtLine_TotalmagMvmt.setText(str(self.SpecificForcast_SLCT_all[0][9]))
            self.ForcastEval_txtLine_TotalMvmPercent.setText(str(self.SpecificForcast_SLCT_all[0][14]))
            
            self.ForcastEval_txtLine_RealMagEarned.setText(str(self.SpecificForcast_SLCT_all[0][10]))
            self.ForcastEval_txtLine_RealPercentEarned.setText(str(self.SpecificForcast_SLCT_all[0][11])) 
            
    
    def Event_UpdateProgress_EvaluationProcess(self):
        pass
    def Event_UpdateProgress_string_Evaluation_Process(self):
        pass
        
                 
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GUI_LSTM_FORCASTER = QtWidgets.QMainWindow()
    ui = Ui_GUI_LSTM_FORCASTER()
    ui.setupUi(GUI_LSTM_FORCASTER)
    GUI_LSTM_FORCASTER.show()
    sys.exit(app.exec_())