# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QT_Files/GUI_FFT_LSTM_Stock.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
sys.path.append("APP/Pakages/DataSetgenPacks")
sys.path.append("APP/Pakages/ForcastingPacks")
sys.path.append("APP/Pakages/Seed_Model")
#from Trainer_Predicting_Esamble import Model_Trainer
#from Forcaster_Model import Forcast_Data
#from Forcaster_Model_DateFromToForcast import Forcast_Data

from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3

from Model_Creator import DL_Model

#To see easy the db file is to drag bdfiel into:  https://inloop.github.io/sqlite-viewer/
#or by using the command c.execute('SELECT * FROM estudiantes")
#print (c.fetchall()) a list is generated


class Ui_GUI_LSTM_FORCASTER(object):
    def __init__(self):
        #### PathFiles  ####
        
        ####  App Instances 
        self.Model_DB_conn=sqlite3.connect('APP/DataStructures/Predict_model.db')
        #Create cursor
        self.Model_c = self.Model_DB_conn.cursor()
        
        ### Class Model Creator
        self.model_creator = DL_Model() 
        
        ## global var init
        
        ##Seed_Data; Getting all data 
        query="SELECT * FROM Seed_Data"
        
        self.Model_c.execute(query)
        self.SeedData_SLCT_all=self.Model_c.fetchall()
        
        ## model Data; getting all data
        query="SELECT * FROM Models"
        
        self.Model_c.execute(query)
        self.ModelsData_SLCT_all=self.Model_c.fetchall()
    
    def setupUi(self, GUI_LSTM_FORCASTER):
        GUI_LSTM_FORCASTER.setObjectName("GUI_LSTM_FORCASTER")
        GUI_LSTM_FORCASTER.resize(700, 446)
        self.centralwidget = QtWidgets.QWidget(GUI_LSTM_FORCASTER)
        self.centralwidget.setObjectName("centralwidget")
        self.Tabs = QtWidgets.QTabWidget(self.centralwidget)
        self.Tabs.setGeometry(QtCore.QRect(10, 0, 681, 421))
        self.Tabs.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Tabs.setTabPosition(QtWidgets.QTabWidget.North)
        self.Tabs.setMovable(False)
        self.Tabs.setTabBarAutoHide(False)
        self.Tabs.setObjectName("Tabs")
        self.BasicConf_Tab = QtWidgets.QWidget()
        self.BasicConf_Tab.setObjectName("BasicConf_Tab")
        self.BaCon_lbl_ChooseModel = QtWidgets.QLabel(self.BasicConf_Tab)
        self.BaCon_lbl_ChooseModel.setGeometry(QtCore.QRect(28, 50, 161, 20))
        self.BaCon_lbl_ChooseModel.setObjectName("BaCon_lbl_ChooseModel")
        self.BaCon_lbl_DatasetBelongs = QtWidgets.QLabel(self.BasicConf_Tab)
        self.BaCon_lbl_DatasetBelongs.setGeometry(QtCore.QRect(30, 130, 231, 16))
        self.BaCon_lbl_DatasetBelongs.setObjectName("BaCon_lbl_DatasetBelongs")
        self.BaCon_btn_SetConfig = QtWidgets.QPushButton(self.BasicConf_Tab)
        self.BaCon_btn_SetConfig.setGeometry(QtCore.QRect(520, 190, 113, 32))
        self.BaCon_btn_SetConfig.setObjectName("BaCon_btn_SetConfig")
        self.BaCon_Combox_ChooseModel = QtWidgets.QComboBox(self.BasicConf_Tab)
        self.BaCon_Combox_ChooseModel.setGeometry(QtCore.QRect(26, 70, 361, 26))
        self.BaCon_Combox_ChooseModel.setObjectName("BaCon_Combox_ChooseModel")
        self.BaCon_txtLine_DatasetBelongs = QtWidgets.QLineEdit(self.BasicConf_Tab)
        self.BaCon_txtLine_DatasetBelongs.setGeometry(QtCore.QRect(30, 150, 351, 21))
        self.BaCon_txtLine_DatasetBelongs.setObjectName("BaCon_txtLine_DatasetBelongs")
        self.Tabs.addTab(self.BasicConf_Tab, "")
        self.Forcasting_Tab = QtWidgets.QWidget()
        self.Forcasting_Tab.setObjectName("Forcasting_Tab")
        self.ForC_Loadbar_Forcast = QtWidgets.QProgressBar(self.Forcasting_Tab)
        self.ForC_Loadbar_Forcast.setGeometry(QtCore.QRect(140, 240, 391, 61))
        self.ForC_Loadbar_Forcast.setProperty("value", 24)
        self.ForC_Loadbar_Forcast.setObjectName("ForC_Loadbar_Forcast")
        self.ForC_ComBox_DateFrom = QtWidgets.QComboBox(self.Forcasting_Tab)
        self.ForC_ComBox_DateFrom.setGeometry(QtCore.QRect(50, 50, 221, 26))
        self.ForC_ComBox_DateFrom.setObjectName("ForC_ComBox_DateFrom")
        self.ForC_lbl_DateFrom = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_DateFrom.setGeometry(QtCore.QRect(50, 30, 60, 16))
        self.ForC_lbl_DateFrom.setObjectName("ForC_lbl_DateFrom")
        self.ForC_btn_StartForcasting = QtWidgets.QPushButton(self.Forcasting_Tab)
        self.ForC_btn_StartForcasting.setGeometry(QtCore.QRect(350, 110, 221, 101))
        self.ForC_btn_StartForcasting.setObjectName("ForC_btn_StartForcasting")
        self.ForC_radioButton_GetGraph = QtWidgets.QRadioButton(self.Forcasting_Tab)
        self.ForC_radioButton_GetGraph.setGeometry(QtCore.QRect(370, 50, 111, 20))
        self.ForC_radioButton_GetGraph.setObjectName("ForC_radioButton_GetGraph")
        self.label_6 = QtWidgets.QLabel(self.Forcasting_Tab)
        self.label_6.setGeometry(QtCore.QRect(140, 230, 171, 16))
        self.label_6.setObjectName("label_6")
        self.ForC_Gbox_ForcastResul = QtWidgets.QGroupBox(self.Forcasting_Tab)
        self.ForC_Gbox_ForcastResul.setGeometry(QtCore.QRect(50, 110, 251, 91))
        self.ForC_Gbox_ForcastResul.setObjectName("ForC_Gbox_ForcastResul")
        self.label_13 = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.label_13.setGeometry(QtCore.QRect(10, 30, 121, 16))
        self.label_13.setObjectName("label_13")
        self.label_5 = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.label_5.setGeometry(QtCore.QRect(10, 60, 121, 16))
        self.label_5.setObjectName("label_5")
        self.ForC_lbl_TodayPrice = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.ForC_lbl_TodayPrice.setGeometry(QtCore.QRect(130, 31, 121, 16))
        self.ForC_lbl_TodayPrice.setObjectName("ForC_lbl_TodayPrice")
        self.ForC_lbl_TomorrowPrice = QtWidgets.QLabel(self.ForC_Gbox_ForcastResul)
        self.ForC_lbl_TomorrowPrice.setGeometry(QtCore.QRect(130, 61, 101, 16))
        self.ForC_lbl_TomorrowPrice.setObjectName("ForC_lbl_TomorrowPrice")
        self.ForC_txtLine_TailBackDays = QtWidgets.QLineEdit(self.Forcasting_Tab)
        self.ForC_txtLine_TailBackDays.setGeometry(QtCore.QRect(490, 50, 113, 21))
        self.ForC_txtLine_TailBackDays.setObjectName("ForC_txtLine_TailBackDays")
        self.ForC_lbl_TailBackDays = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_TailBackDays.setGeometry(QtCore.QRect(370, 30, 121, 16))
        self.ForC_lbl_TailBackDays.setObjectName("ForC_lbl_TailBackDays")
        self.ForC_lbl_or = QtWidgets.QLabel(self.Forcasting_Tab)
        self.ForC_lbl_or.setGeometry(QtCore.QRect(320, 53, 21, 16))
        self.ForC_lbl_or.setObjectName("ForC_lbl_or")
        self.Tabs.addTab(self.Forcasting_Tab, "")
        
        self.Model_Trainner_Tab = QtWidgets.QWidget()
        self.Model_Trainner_Tab.setObjectName("Model_Trainner_Tab")
        
        self.MoTr_lbl_chooseModel = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_chooseModel.setGeometry(QtCore.QRect(110, 30, 111, 16))
        self.MoTr_lbl_chooseModel.setObjectName("MoTr_lbl_chooseModel")
        self.MoTr_lbl_DataSet = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_DataSet.setGeometry(QtCore.QRect(110, 80, 60, 16))
        self.MoTr_lbl_DataSet.setObjectName("MoTr_lbl_DataSet")
        self.MoTr_txtLine_DataSet = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_DataSet.setGeometry(QtCore.QRect(110, 100, 311, 21))
        self.MoTr_txtLine_DataSet.setObjectName("MoTr_txtLine_DataSet")
        self.MoTr_btn_Totrain = QtWidgets.QPushButton(self.Model_Trainner_Tab)
        self.MoTr_btn_Totrain.setGeometry(QtCore.QRect(470, 60, 141, 51))
        self.MoTr_btn_Totrain.setObjectName("MoTr_btn_Totrain")
        self.MoTr_Plaintxt_CMDTraining = QtWidgets.QPlainTextEdit(self.Model_Trainner_Tab)
        self.MoTr_Plaintxt_CMDTraining.setGeometry(QtCore.QRect(10, 210, 661, 171))
        self.MoTr_Plaintxt_CMDTraining.setObjectName("MoTr_Plaintxt_CMDTraining")
        self.MoTr_lbl_CMD_training = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_CMD_training.setGeometry(QtCore.QRect(10, 190, 161, 16))
        self.MoTr_lbl_CMD_training.setObjectName("MoTr_lbl_CMD_training")
        self.MoTr_txtLine_PercentDataSet = QtWidgets.QLineEdit(self.Model_Trainner_Tab)
        self.MoTr_txtLine_PercentDataSet.setGeometry(QtCore.QRect(110, 150, 61, 21))
        self.MoTr_txtLine_PercentDataSet.setObjectName("MoTr_txtLine_PercentDataSet")
        self.MoTr_lbl_PercentDataset = QtWidgets.QLabel(self.Model_Trainner_Tab)
        self.MoTr_lbl_PercentDataset.setGeometry(QtCore.QRect(110, 130, 111, 16))
        self.MoTr_lbl_PercentDataset.setObjectName("MoTr_lbl_PercentDataset")
        self.MoTr_ComBox_ChooseModel = QtWidgets.QComboBox(self.Model_Trainner_Tab)
        self.MoTr_ComBox_ChooseModel.setGeometry(QtCore.QRect(106, 50, 311, 26))
        self.MoTr_ComBox_ChooseModel.setObjectName("MoTr_ComBox_ChooseModel")
        self.Tabs.addTab(self.Model_Trainner_Tab, "")
        
        
        self.Data_Manager_tab = QtWidgets.QWidget()
        self.Data_Manager_tab.setObjectName("Data_Manager_tab")
        self.DaMa_lbl_Seed_DataSet = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_Seed_DataSet.setGeometry(QtCore.QRect(60, 20, 201, 16))
        self.DaMa_lbl_Seed_DataSet.setObjectName("DaMa_lbl_Seed_DataSet")
        self.DaMa_btn_Update = QtWidgets.QPushButton(self.Data_Manager_tab)
        self.DaMa_btn_Update.setGeometry(QtCore.QRect(500, 200, 113, 101))
        self.DaMa_btn_Update.setObjectName("DaMa_btn_Update")
        self.DaMa_LoadBar_Progres = QtWidgets.QProgressBar(self.Data_Manager_tab)
        self.DaMa_LoadBar_Progres.setGeometry(QtCore.QRect(150, 340, 411, 41))
        self.DaMa_LoadBar_Progres.setProperty("value", 24)
        self.DaMa_LoadBar_Progres.setObjectName("DaMa_LoadBar_Progres")
        self.DaMa_Lbl_Progres = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_Lbl_Progres.setGeometry(QtCore.QRect(150, 330, 291, 16))
        self.DaMa_Lbl_Progres.setObjectName("DaMa_Lbl_Progres")
        self.DaMa_ComBox_Seed_DataSet = QtWidgets.QComboBox(self.Data_Manager_tab)
        self.DaMa_ComBox_Seed_DataSet.setGeometry(QtCore.QRect(60, 40, 101, 26))
        self.DaMa_ComBox_Seed_DataSet.setObjectName("DaMa_ComBox_Seed_DataSet")
        self.DaMa_lbl_DataSetId = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_DataSetId.setGeometry(QtCore.QRect(370, 20, 91, 16))
        self.DaMa_lbl_DataSetId.setObjectName("DaMa_lbl_DataSetId")
        self.DaMa_ComBox_DataSet_Id = QtWidgets.QComboBox(self.Data_Manager_tab)
        self.DaMa_ComBox_DataSet_Id.setGeometry(QtCore.QRect(370, 40, 101, 26))
        self.DaMa_ComBox_DataSet_Id.setObjectName("DaMa_ComBox_DataSet_Id")
        self.DaMa_btn_Create = QtWidgets.QPushButton(self.Data_Manager_tab)
        self.DaMa_btn_Create.setGeometry(QtCore.QRect(370, 200, 113, 101))
        self.DaMa_btn_Create.setObjectName("DaMa_btn_Create")
        self.DaMa_txtLine_Stock_Item = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_Stock_Item.setGeometry(QtCore.QRect(60, 90, 231, 21))
        self.DaMa_txtLine_Stock_Item.setObjectName("DaMa_txtLine_Stock_Item")
        self.DaMa_txtLine_BackDay = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_BackDay.setGeometry(QtCore.QRect(60, 140, 80, 21))
        self.DaMa_txtLine_BackDay.setObjectName("DaMa_txtLine_BackDay")
        self.DaMa_txtLine_FFT_Frec = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_FFT_Frec.setGeometry(QtCore.QRect(210, 140, 80, 21))
        self.DaMa_txtLine_FFT_Frec.setObjectName("DaMa_txtLine_FFT_Frec")
        self.DaMa_lbl_Stock_Item = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_Stock_Item.setGeometry(QtCore.QRect(60, 70, 201, 16))
        self.DaMa_lbl_Stock_Item.setObjectName("DaMa_lbl_Stock_Item")
        self.DaMa_txtLine_DateTime = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_DateTime.setGeometry(QtCore.QRect(370, 90, 241, 21))
        self.DaMa_txtLine_DateTime.setObjectName("DaMa_txtLine_DateTime")
        self.DaMa_txtLine_PathCSV_File = QtWidgets.QLineEdit(self.Data_Manager_tab)
        self.DaMa_txtLine_PathCSV_File.setGeometry(QtCore.QRect(370, 140, 241, 21))
        self.DaMa_txtLine_PathCSV_File.setObjectName("DaMa_txtLine_PathCSV_File")
        self.DaMa_lbl_DateTime = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_DateTime.setGeometry(QtCore.QRect(370, 70, 201, 16))
        self.DaMa_lbl_DateTime.setObjectName("DaMa_lbl_DateTime")
        self.DaMa_lbl_BackDays = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_BackDays.setGeometry(QtCore.QRect(60, 120, 80, 16))
        self.DaMa_lbl_BackDays.setObjectName("DaMa_lbl_BackDays")
        self.DaMa_lbl_FFT_Frec = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_FFT_Frec.setGeometry(QtCore.QRect(210, 120, 80, 16))
        self.DaMa_lbl_FFT_Frec.setObjectName("DaMa_lbl_FFT_Frec")
        self.DaMa_lbl_PathCSVFile = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_PathCSVFile.setGeometry(QtCore.QRect(370, 120, 201, 16))
        self.DaMa_lbl_PathCSVFile.setObjectName("DaMa_lbl_PathCSVFile")
        self.DaMa_CheckBox_Open = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Open.setGeometry(QtCore.QRect(40, 200, 100, 20))
        self.DaMa_CheckBox_Open.setObjectName("DaMa_CheckBox_Open")
        self.DaMa_lbl_Columns = QtWidgets.QLabel(self.Data_Manager_tab)
        self.DaMa_lbl_Columns.setGeometry(QtCore.QRect(60, 180, 201, 16))
        self.DaMa_lbl_Columns.setObjectName("DaMa_lbl_Columns")
        self.DaMa_CheckBox_High = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_High.setGeometry(QtCore.QRect(40, 220, 100, 20))
        self.DaMa_CheckBox_High.setObjectName("DaMa_CheckBox_high")
        self.DaMa_CheckBox_Low = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Low.setGeometry(QtCore.QRect(40, 240, 100, 20))
        self.DaMa_CheckBox_Low.setObjectName("DaMa_CheckBox_Low")
        self.DaMa_CheckBox_Close = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Close.setGeometry(QtCore.QRect(40, 260, 100, 20))
        self.DaMa_CheckBox_Close.setObjectName("DaMa_CheckBox_Close")
        self.DaMa_CheckBox_DayNumber = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_DayNumber.setGeometry(QtCore.QRect(240, 200, 100, 20))
        self.DaMa_CheckBox_DayNumber.setObjectName("DaMa_CheckBox_DayNumber")
        self.DaMa_CheckBox_Open_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Open_FFT.setGeometry(QtCore.QRect(120, 200, 100, 20))
        self.DaMa_CheckBox_Open_FFT.setObjectName("DaMa_CheckBox_Open_FFT")
        self.DaMa_CheckBox_High_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_High_FFT.setGeometry(QtCore.QRect(120, 220, 100, 20))
        self.DaMa_CheckBox_High_FFT.setObjectName("DaMa_CheckBox_HighFFT")
        self.DaMa_CheckBox_Low_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Low_FFT.setGeometry(QtCore.QRect(120, 240, 100, 21))
        self.DaMa_CheckBox_Low_FFT.setObjectName("DaMa_CheckBox_Low_FFT")
        self.DaMa_CheckBox_Close_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Close_FFT.setGeometry(QtCore.QRect(120, 260, 100, 21))
        self.DaMa_CheckBox_Close_FFT.setObjectName("DaMa_CheckBox_Close_FFT")
        self.DaMa_CheckBox_Month_Number = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Month_Number.setGeometry(QtCore.QRect(240, 220, 111, 20))
        self.DaMa_CheckBox_Month_Number.setObjectName("DaMa_CheckBox_Month_Number")
        self.DaMa_CheckBox_DayMonth = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_DayMonth.setGeometry(QtCore.QRect(240, 240, 100, 20))
        self.DaMa_CheckBox_DayMonth.setObjectName("DaMa_CheckBox_DayMonth")
        self.DaMa_CheckBox_Year = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Year.setGeometry(QtCore.QRect(240, 260, 100, 20))
        self.DaMa_CheckBox_Year.setObjectName("DaMa_CheckBox_Year")
        self.DaMa_CheckBox_Volume = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Volume.setGeometry(QtCore.QRect(40, 280, 100, 20))
        self.DaMa_CheckBox_Volume.setObjectName("DaMa_CheckBox_Volume")
        self.DaMa_CheckBox_Volume_FFT = QtWidgets.QCheckBox(self.Data_Manager_tab)
        self.DaMa_CheckBox_Volume_FFT.setGeometry(QtCore.QRect(120, 280, 100, 20))
        self.DaMa_CheckBox_Volume_FFT.setObjectName("DaMa_CheckBox_Volume_FFT")
        self.Tabs.addTab(self.Data_Manager_tab, "")
        self.ModCrtion = QtWidgets.QWidget()
        self.ModCrtion.setObjectName("ModCrtion")
        self.Model_C_LBL_Progres = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Progres.setGeometry(QtCore.QRect(160, 340, 450, 16))
        self.Model_C_LBL_Progres.setObjectName("Model_C_LBL_Progres")
        self.Model_C_LdBar = QtWidgets.QProgressBar(self.ModCrtion)
        self.Model_C_LdBar.setGeometry(QtCore.QRect(160, 350, 411, 41))
        self.Model_C_LdBar.setProperty("value", 0)
        self.Model_C_LdBar.setObjectName("Model_C_LdBar")
        self.Model_C_txtLine_LSTM1 = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_LSTM1.setGeometry(QtCore.QRect(20, 90, 270, 25))
        self.Model_C_txtLine_LSTM1.setObjectName("Model_C_txtLine_LSTM1")
        self.Model_C_txtLine_LSTM2 = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_LSTM2.setGeometry(QtCore.QRect(20, 150, 270, 25))
        self.Model_C_txtLine_LSTM2.setObjectName("Model_C_txtLine_LSTM2")
        self.Model_C_PB_Create_M = QtWidgets.QPushButton(self.ModCrtion)
        self.Model_C_PB_Create_M.setGeometry(QtCore.QRect(40, 260, 221, 71))
        self.Model_C_PB_Create_M.setObjectName("Model_C_PB_Create_M")
        self.Model_C_txtLine_Lyr_Dns = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_Lyr_Dns.setGeometry(QtCore.QRect(360, 30, 270, 25))
        self.Model_C_txtLine_Lyr_Dns.setObjectName("Model_C_txtLine_Lyr_Dns")
        self.Model_C_Lyr_Dn_Rgzr = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_Lyr_Dn_Rgzr.setGeometry(QtCore.QRect(360, 90, 270, 25))
        self.Model_C_Lyr_Dn_Rgzr.setObjectName("Model_C_Lyr_Dn_Rgzr")
        self.Model_C_txtLine_OptAdam_Co = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_OptAdam_Co.setGeometry(QtCore.QRect(360, 150, 270, 25))
        self.Model_C_txtLine_OptAdam_Co.setObjectName("Model_C_txtLine_OptAdam_Co")
        self.Model_C_txtLine_Colums = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_Colums.setGeometry(QtCore.QRect(360, 210, 270, 25))
        self.Model_C_txtLine_Colums.setObjectName("Model_C_txtLine_Colums")
        self.Model_C_txtLine_LryDCoeff = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_LryDCoeff.setGeometry(QtCore.QRect(20, 210, 270, 25))
        self.Model_C_txtLine_LryDCoeff.setObjectName("Model_C_txtLine_LryDCoeff")
        self.Model_C_LBL_LSTM1 = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_LSTM1.setGeometry(QtCore.QRect(20, 70, 180, 16))
        self.Model_C_LBL_LSTM1.setObjectName("Model_C_LBL_LSTM1")
        self.Model_C_LBL_LSTM2 = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_LSTM2.setGeometry(QtCore.QRect(20, 130, 180, 16))
        self.Model_C_LBL_LSTM2.setObjectName("Model_C_LBL_LSTM2")
        self.Model_C_LBL_LryDCoeff = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_LryDCoeff.setGeometry(QtCore.QRect(20, 190, 180, 16))
        self.Model_C_LBL_LryDCoeff.setObjectName("Model_C_LBL_LryDCoeff")
        self.Model_C_LBL_Lyr_Dns = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Lyr_Dns.setGeometry(QtCore.QRect(360, 10, 180, 16))
        self.Model_C_LBL_Lyr_Dns.setObjectName("Model_C_LBL_Lyr_Dns")
        self.Model_C_LBL_Lyr_Dn_Rgzr = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Lyr_Dn_Rgzr.setGeometry(QtCore.QRect(360, 70, 180, 16))
        self.Model_C_LBL_Lyr_Dn_Rgzr.setObjectName("Model_C_LBL_Lyr_Dn_Rgzr")
        self.Model_C_LBL_OptAdam_Co = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_OptAdam_Co.setGeometry(QtCore.QRect(360, 130, 180, 16))
        self.Model_C_LBL_OptAdam_Co.setObjectName("Model_C_LBL_OptAdam_Co")
        self.Model_C_LBL_Colums = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Colums.setGeometry(QtCore.QRect(360, 190, 180, 16))
        self.Model_C_LBL_Colums.setObjectName("Model_C_LBL_Colums")
        self.Model_C_LBL_BackDays = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_BackDays.setGeometry(QtCore.QRect(20, 10, 181, 16))
        self.Model_C_LBL_BackDays.setObjectName("Model_C_LBL_BackDays")
        self.Model_C_txtLine_BackDays = QtWidgets.QLineEdit(self.ModCrtion)
        self.Model_C_txtLine_BackDays.setGeometry(QtCore.QRect(20, 30, 131, 25))
        self.Model_C_txtLine_BackDays.setObjectName("Model_C_txtLine_LryDCoeff")
        self.Model_C_LBL_Int_Model = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Int_Model.setGeometry(QtCore.QRect(280, 260, 180, 16))
        self.Model_C_LBL_Int_Model.setObjectName("Model_C_LBL_Int_Model")
        self.Model_C_ComBox_Int_Model = QtWidgets.QComboBox(self.ModCrtion)
        self.Model_C_ComBox_Int_Model.setGeometry(QtCore.QRect(280, 280, 141, 25))
        self.Model_C_ComBox_Int_Model.setObjectName("Model_C_ComBox_Int_Model")
        self.Model_C_ComBox_Int_Model.clear()
        for i in self.ModelsData_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            self.Model_C_ComBox_Int_Model.addItem(str(Current_Row))
        self.Model_C_LBL_Int_Seed_Data = QtWidgets.QLabel(self.ModCrtion)
        self.Model_C_LBL_Int_Seed_Data.setGeometry(QtCore.QRect(195, 10, 180, 26))
        self.Model_C_LBL_Int_Seed_Data.setObjectName("Model_C_LBL_Int_Seed_Data")   
        self.Model_C_ComBox_Int_Seed_Data = QtWidgets.QComboBox(self.ModCrtion)
        self.Model_C_ComBox_Int_Seed_Data.setGeometry(QtCore.QRect(195, 30, 100, 26))
        self.Model_C_ComBox_Int_Seed_Data.setObjectName("Model_C_ComBox_Int_Seed_Data")
        self.Model_C_ComBox_Int_Seed_Data.clear() #When starting app, combobox is updated
        for i in self.SeedData_SLCT_all: #ComboBox is updated
            Current_Row=i[0]
            self.Model_C_ComBox_Int_Seed_Data.addItem(str(Current_Row))
        self.SeedDataComboBoxChanged() 
        self.Tabs.addTab(self.ModCrtion, "")
        
        
        GUI_LSTM_FORCASTER.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(GUI_LSTM_FORCASTER)
        self.statusbar.setObjectName("statusbar")
        GUI_LSTM_FORCASTER.setStatusBar(self.statusbar)

        self.retranslateUi(GUI_LSTM_FORCASTER)
        self.Tabs.setCurrentIndex(4)
        QtCore.QMetaObject.connectSlotsByName(GUI_LSTM_FORCASTER)
        
        
        #---------- General emit signals ---------
        self.Model_C_ComBox_Int_Seed_Data.currentIndexChanged.connect(self.SeedDataComboBoxChanged)
        self.Model_C_ComBox_Int_Model.currentIndexChanged.connect(self.ModelsComboBoxChanged)
            
        #--------- thread emit signals -----------
        self.model_creator.Update_ModelCreationStatus.connect(self.Event_ModelCreationStatus)
        self.model_creator.Update_Progress.connect(self.Event_UpdateProgress_ModelCreator)
        self.model_creator.Update_Progress_String.connect(self.Event_UpdateProgress_string_ModelCreator)
        
         
         #####  Buttons calls #####
    
            ### Tab Model creator  
        self.Model_C_PB_Create_M.clicked.connect(self.Create_New_Model)
        
            ### Data Manager
        self.DaMa_btn_Create.clicked.connect(self.CreateDataSet)
       
        
            ### TabAppComments
        #self.AppCom_PB_Clear.clicked.connect(self.AppCom_Clear)
        

    def retranslateUi(self, GUI_LSTM_FORCASTER):
        _translate = QtCore.QCoreApplication.translate
        GUI_LSTM_FORCASTER.setWindowTitle(_translate("GUI_LSTM_FORCASTER", "Stock_Forcastig_Interface"))
        self.BaCon_lbl_ChooseModel.setText(_translate("GUI_LSTM_FORCASTER", "To choose the model"))
        self.BaCon_lbl_DatasetBelongs.setText(_translate("GUI_LSTM_FORCASTER", "Dataset that belongs to model"))
        self.BaCon_btn_SetConfig.setText(_translate("GUI_LSTM_FORCASTER", "Set Config"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.BasicConf_Tab), _translate("GUI_LSTM_FORCASTER", "Basic Config"))
        self.ForC_lbl_DateFrom.setText(_translate("GUI_LSTM_FORCASTER", "Date from"))
        self.ForC_btn_StartForcasting.setText(_translate("GUI_LSTM_FORCASTER", "START FORCASTING"))
        self.ForC_radioButton_GetGraph.setText(_translate("GUI_LSTM_FORCASTER", "Get the graph?"))
        self.label_6.setText(_translate("GUI_LSTM_FORCASTER", "Ready to forcast"))
        self.ForC_Gbox_ForcastResul.setTitle(_translate("GUI_LSTM_FORCASTER", "Forcast Result Close"))
        self.label_13.setText(_translate("GUI_LSTM_FORCASTER", "Today Close price:"))
        self.label_5.setText(_translate("GUI_LSTM_FORCASTER", "Tomorrow forcast:"))
        self.ForC_lbl_TodayPrice.setText(_translate("GUI_LSTM_FORCASTER", "2334"))
        self.ForC_lbl_TomorrowPrice.setText(_translate("GUI_LSTM_FORCASTER", "234"))
        self.ForC_txtLine_TailBackDays.setText(_translate("GUI_LSTM_FORCASTER", "200"))
        self.ForC_lbl_TailBackDays.setText(_translate("GUI_LSTM_FORCASTER", "Tail backdays"))
        self.ForC_lbl_or.setText(_translate("GUI_LSTM_FORCASTER", "Or"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Forcasting_Tab), _translate("GUI_LSTM_FORCASTER", "Forcasting"))
        self.MoTr_lbl_chooseModel.setText(_translate("GUI_LSTM_FORCASTER", "To choose Model"))
        self.MoTr_lbl_DataSet.setText(_translate("GUI_LSTM_FORCASTER", "DataSet"))
        self.MoTr_btn_Totrain.setText(_translate("GUI_LSTM_FORCASTER", "To train"))
        self.MoTr_lbl_CMD_training.setText(_translate("GUI_LSTM_FORCASTER", "CMD training process"))
        self.MoTr_lbl_PercentDataset.setText(_translate("GUI_LSTM_FORCASTER", "% Data to test"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Model_Trainner_Tab), _translate("GUI_LSTM_FORCASTER", "Model Trainner"))
        self.DaMa_lbl_Seed_DataSet.setText(_translate("GUI_LSTM_FORCASTER", "Seed DataSet Id"))
        self.DaMa_btn_Update.setText(_translate("GUI_LSTM_FORCASTER", "Update"))
        self.DaMa_Lbl_Progres.setText(_translate("GUI_LSTM_FORCASTER", "Ready"))
        self.DaMa_lbl_DataSetId.setText(_translate("GUI_LSTM_FORCASTER", "DataSet id"))
        self.DaMa_btn_Create.setText(_translate("GUI_LSTM_FORCASTER", "Create"))
        self.DaMa_lbl_Stock_Item.setText(_translate("GUI_LSTM_FORCASTER", "Stock Item"))
        self.DaMa_lbl_DateTime.setText(_translate("GUI_LSTM_FORCASTER", "Date time"))
        self.DaMa_lbl_BackDays.setText(_translate("GUI_LSTM_FORCASTER", "BackDays"))
        self.DaMa_lbl_FFT_Frec.setText(_translate("GUI_LSTM_FORCASTER", "FFT_frec"))
        self.DaMa_lbl_PathCSVFile.setText(_translate("GUI_LSTM_FORCASTER", "Path CSV file"))
        self.DaMa_CheckBox_Open.setText(_translate("GUI_LSTM_FORCASTER", "Open"))
        self.DaMa_lbl_Columns.setText(_translate("GUI_LSTM_FORCASTER", "Columns"))
        self.DaMa_CheckBox_High.setText(_translate("GUI_LSTM_FORCASTER", "High"))
        self.DaMa_CheckBox_Low.setText(_translate("GUI_LSTM_FORCASTER", "Low"))
        self.DaMa_CheckBox_Close.setText(_translate("GUI_LSTM_FORCASTER", "Close"))
        self.DaMa_CheckBox_DayNumber.setText(_translate("GUI_LSTM_FORCASTER", "DayNumber"))
        self.DaMa_CheckBox_Open_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Open FFT"))
        self.DaMa_CheckBox_High_FFT.setText(_translate("GUI_LSTM_FORCASTER", "High FFT"))
        self.DaMa_CheckBox_Low_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Low FFT"))
        self.DaMa_CheckBox_Close_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Close FFT"))
        self.DaMa_CheckBox_Month_Number.setText(_translate("GUI_LSTM_FORCASTER", "Month Number"))
        self.DaMa_CheckBox_DayMonth.setText(_translate("GUI_LSTM_FORCASTER", "DayMonth"))
        self.DaMa_CheckBox_Year.setText(_translate("GUI_LSTM_FORCASTER", "Year"))
        self.DaMa_CheckBox_Volume.setText(_translate("GUI_LSTM_FORCASTER", "Volume"))
        self.DaMa_CheckBox_Volume_FFT.setText(_translate("GUI_LSTM_FORCASTER", "Volume FFT"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Data_Manager_tab), _translate("GUI_LSTM_FORCASTER", "Data manager"))
        self.Model_C_LBL_Progres.setText(_translate("GUI_LSTM_FORCASTER", "Ready"))
        self.Model_C_LdBar.setProperty("value",0)
        self.Model_C_PB_Create_M.setText(_translate("GUI_LSTM_FORCASTER", "Create model"))
        self.Model_C_LBL_Int_Seed_Data.setText(_translate("GUI_LSTM_FORCASTER", "#Int Seed_Data"))
        self.Model_C_LBL_LSTM1.setText(_translate("GUI_LSTM_FORCASTER", "LSTM_1_#Units"))
        self.Model_C_LBL_LSTM2.setText(_translate("GUI_LSTM_FORCASTER", "LSTM_2_#Units"))
        self.Model_C_LBL_LryDCoeff.setText(_translate("GUI_LSTM_FORCASTER", "Lyr_Drop_Coeff"))
        self.Model_C_LBL_Lyr_Dns.setText(_translate("GUI_LSTM_FORCASTER", "Lyr_Dns_#Unit"))
        self.Model_C_LBL_Lyr_Dn_Rgzr.setText(_translate("GUI_LSTM_FORCASTER", "Lyr_Dns_Rgzr_Coeff"))
        self.Model_C_LBL_OptAdam_Co.setText(_translate("GUI_LSTM_FORCASTER", "Optmzer_Adam_Coeff"))
        self.Model_C_LBL_Colums.setText(_translate("GUI_LSTM_FORCASTER", "Colums_N"))
        self.Model_C_LBL_Int_Model.setText(_translate("GUI_LSTM_FORCASTER", "#Int_model"))
        self.Model_C_LBL_BackDays.setText(_translate("GUI_LSTM_FORCASTER", "#BackDays"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.ModCrtion), _translate("GUI_LSTM_FORCASTER", "Model Creation"))
        
    
    ###########################################
    #              TAB Model Creator          #
    ###########################################
    
    ############### Bottons functions  ################
    
    def Create_New_Model(self):
        matching=False
        CurrentSeedDataRow=0
        BackDays=self.Model_C_txtLine_BackDays.text()
        LSTM1_Units=self.Model_C_txtLine_LSTM1.text()
        LSTM2_Units=self.Model_C_txtLine_LSTM2.text()
        LryDcoeff=self.Model_C_txtLine_LryDCoeff.text()
        Lyr_Dns=self.Model_C_txtLine_Lyr_Dns.text()
        Lyr_Dn_Rgzr=self.Model_C_Lyr_Dn_Rgzr.text()
        OptAdam_Co=self.Model_C_txtLine_OptAdam_Co.text()
        Colums=self.Model_C_txtLine_Colums.text()
        
        #Check if seed data already exist
        matching,matching_row=self.Check_Matching_DataSeed(Colums,LSTM1_Units,LSTM2_Units,LryDcoeff,Lyr_Dns,Lyr_Dn_Rgzr,OptAdam_Co,BackDays)
        
        #new seed data is created; if at least a feature has been changed
        if matching==False:
            self.Create_new_DataSeed_DB(Colums,LSTM1_Units,LSTM2_Units,LryDcoeff,Lyr_Dns,Lyr_Dn_Rgzr,OptAdam_Co,BackDays)
            query="SELECT * FROM Seed_Data WHERE Seed_Data_id=(SELECT max(Seed_Data_id) FROM Seed_Data)"
            self.Model_c.execute(query)
            ContentList=self.Model_c.fetchall()
            for i in ContentList: 
                CurrentSeedDataRow=i[0]
            #Adding to Combo Box the data seed just created
            self.AddinElementComoBoxDataSeed(CurrentSeedDataRow)
        else:
            CurrentSeedDataRow=matching_row
        
        #Shows in combo box the current Item in used
        index= self.Model_C_ComBox_Int_Seed_Data.findText(str(CurrentSeedDataRow),QtCore.Qt.MatchFixedString)
        self.Model_C_ComBox_Int_Seed_Data.setCurrentIndex(index) #To set the item, consider (item from 1) (index from 0)    
        
        
        query="SELECT * FROM Models WHERE Model_id=(SELECT max(Model_id) FROM Models)"
        self.Model_c.execute(query)
        Last_Model_row=self.Model_c.fetchall()
        print(Last_Model_row)
        if Last_Model_row==[]:
            LastModelRow=0
        else:    
            for j in Last_Model_row: 
                LastModelRow=j[0]
                print(LastModelRow)
        self.model_creator.Set_Last_model_Crated(LastModelRow)
        
        #Model is created (thread)
       
        self.model_creator.Set_SeedParam(CurrentSeedDataRow,LSTM1_Units,LSTM2_Units,LryDcoeff,Lyr_Dns,Lyr_Dn_Rgzr,OptAdam_Co,Colums,BackDays)
        
        self.model_creator.start()
        
    ############ General Fucntions  ############   
    def ModelsComboBoxChanged(self):
        Model_Selected=self.Model_C_ComBox_Int_Model.currentText()
        
        query="SELECT * FROM Models WHERE Model_id=?"
        
        self.Model_c.execute(query,(Model_Selected,))
        Select_Model=self.Model_c.fetchall()

        for i in Select_Model:   
            SeedDataModel=i[4]
        index= self.Model_C_ComBox_Int_Seed_Data.findText(str(SeedDataModel),QtCore.Qt.MatchFixedString)
        self.Model_C_ComBox_Int_Seed_Data.setCurrentIndex(index)  
       
    def SeedDataComboBoxChanged(self):
        Item_Selected=self.Model_C_ComBox_Int_Seed_Data.currentText()
        
        query="SELECT * FROM Seed_Data WHERE Seed_Data_id=?"
        
        self.Model_c.execute(query,(Item_Selected,))
        Select_SeedData=self.Model_c.fetchall()

        for i in Select_SeedData:  
            self.Model_C_txtLine_LSTM1.setText(str(i[2]))
            self.Model_C_txtLine_LSTM2.setText(str(i[3]))
            self.Model_C_txtLine_LryDCoeff.setText(str(i[4]))
            self.Model_C_txtLine_Lyr_Dns.setText(str(i[5]))
            self.Model_C_Lyr_Dn_Rgzr.setText(str(i[6]))
            self.Model_C_txtLine_OptAdam_Co.setText(str(i[7]))
            self.Model_C_txtLine_BackDays.setText(str(i[8]))
            self.Model_C_txtLine_Colums.setText(str(i[1]))
    
    def AddinElementComoBoxDataSeed(self,val1):
        self.Model_C_ComBox_Int_Seed_Data.addItem(str(val1))
    
    def AddinElementComoBoxModelData(self,val1):
        self.Model_C_ComBox_Int_Model.addItem(str(val1))
          
    def Check_Matching_DataSeed(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8):
        Matching=False
        Matching_Row=0
        Matching_Val1=False
        Matching_Val2=False
        Matching_Val3=False
        Matching_Val4=False
        Matching_Val5=False
        Matching_Val6=False
        Matching_Val7=False
        Matching_Val8=False
        
        ##Seed_Data; Getting all data 
        query="SELECT * FROM Seed_Data"
         
        self.Model_c.execute(query)
        SeedData_SLCT_all=self.Model_c.fetchall()
        
        for i in SeedData_SLCT_all: 
            Matching_Row=i[0]
            
            if int(i[1])==int(val_1): Matching_Val1=True
            else: Matching_Val1=False

            if int(i[2])==int(val_2): Matching_Val2=True 
            else: Matching_Val2=False
            
            if int(i[3])==int(val_3): Matching_Val3=True 
            else: Matching_Val3=False
            
            if float(i[4])==float(val_4): Matching_Val4=True 
            else: Matching_Val4=False
            
            if int(i[5])==int(val_5): Matching_Val5=True 
            else: Matching_Val5=False
            
            if float(i[6])==float(val_6): Matching_Val6=True 
            else: Matching_Val6=False
            
            if str(i[7])==str(val_7): Matching_Val7=True 
            else: Matching_Val7=False
            
            if str(i[8])==str(val_8): Matching_Val8=True 
            else: Matching_Val8=False

            if Matching_Val1 and Matching_Val2 and Matching_Val3 and Matching_Val4 and Matching_Val5 and Matching_Val6 and Matching_Val7 and Matching_Val8==True:
                Matching=True
                break
            else:
                Matching_Row=0
        
        return Matching,Matching_Row
        
    def Create_new_DataSeed_DB(self,val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8):
        
        query=""" INSERT INTO Seed_Data (Columns_N,LSTM_1_N_Units, LSTM_2_N_Units,Lyr_Drop_Coeff,Lyr_Dns_N_Units,Lyr_Dns_Rgzr_Coeff,Optmzer_Adam_Coeff,BackDays)
         VALUES (?,?,?,?,?,?,?,?)"""

        self.Model_c.execute(query,(val_1,val_2,val_3,val_4,val_5,val_6,val_7,val_8)) 
        
        #Validate changes to our DB 
        self.Model_DB_conn.commit()
        print("was created new dataseed")

    def Creare_new_model_DB(self,val_1,val_2,val_3,val_4,val_5):

        """date_Time TEXT,
        Path_Model TEXT,
        N_epochs_Done INTEGER,
        Seed_Data_id_FRGN INTEGER,
        DataSet_id_FRGN INTEGER"""
        
        query=""" INSERT INTO Models (date_Time,Path_Model, N_epochs_Done,Seed_Data_id_FRGN,DataSet_id_FRGN)
         VALUES (?,?,?,?,?)"""

        self.Model_c.execute(query,(val_1,val_2,val_3,val_4,val_5)) 
        
        #Validate changes to our DB 
        self.Model_DB_conn.commit()
        print("was created new model")

    ##### Emit thread signals
    
    def Event_ModelCreationStatus(self,val):
        date_Time,Path_Model,N_epochs_Done,Seed_Data_id_FRGN,DataSet_id_FRGN=self.model_creator.Get_NewModelData()
        NewModelStatus=self.model_creator.GetModelCreationStatus()
        print(NewModelStatus)

        if val:
            self.Creare_new_model_DB(date_Time,Path_Model,N_epochs_Done,Seed_Data_id_FRGN,DataSet_id_FRGN)
            print("Model Created :'D")
            modelJustCreated=self.model_creator.Get_Last_model_Create()+1
            self.AddinElementComoBoxModelData(modelJustCreated)
            index= self.Model_C_ComBox_Int_Model.findText(str(modelJustCreated),QtCore.Qt.MatchFixedString)
            self.Model_C_ComBox_Int_Model.setCurrentIndex(index)
                
    def Event_UpdateProgress_ModelCreator(self,val):
        self.Model_C_LdBar.setProperty("value",val)
                
    def Event_UpdateProgress_string_ModelCreator(self,val): 
        self.Model_C_LBL_Progres.setText(val)
            
       
    ###########################################
    #              TAB Data Manager           #
    ###########################################
    
    ############### Bottons functions  ################   
    def CreateDataSet(self):
        matching=False
        CurrentSeedDataRow=0
        Item = self.DaMa_txtLine_Stock_Item.text()
        BackDays = self.DaMa_txtLine_BackDay.text()
        FFT_Frec = self.DaMa_txtLine_FFT_Frec.text()
        Open_C = self.DaMa_CheckBox_Open.isChecked()
        
        High_C = self.DaMa_CheckBox_High.isChecked()
        Low_C = self.DaMa_CheckBox_Low.isChecked()
        Close_C = self.DaMa_CheckBox_Close.isChecked()
        Volume_C = self.DaMa_CheckBox_Volume.isChecked()
        Open_FFT_C = self.DaMa_CheckBox_Open_FFT.isChecked()
        High_FFT_C = self.DaMa_CheckBox_High_FFT.isChecked()
        Low_FFT_C = self.DaMa_CheckBox_Low_FFT.isChecked()
        Close_FFT_C = self.DaMa_CheckBox_Close_FFT.isChecked()
        Volum_FFT_C = self.DaMa_CheckBox_Volume_FFT.isChecked()
        Day_Wk_N_C = self.DaMa_CheckBox_DayNumber.isChecked()
        Month_N_C = self.DaMa_CheckBox_Month_Number.isChecked()
        Day_Month_C =  self.DaMa_CheckBox_DayMonth.isChecked()
        Year_C = self.DaMa_CheckBox_Year.isChecked()
        
        print(Item)
        print(BackDays)
        print(FFT_Frec)
        print(Open_C)
        print(Low_C)
        print(Volume_C)
        print(High_FFT_C)
        print(Close_FFT_C)
        print(Day_Wk_N_C)
        print(Day_Month_C)
        print(Year_C)

        
        
        
                      
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GUI_LSTM_FORCASTER = QtWidgets.QMainWindow()
    ui = Ui_GUI_LSTM_FORCASTER()
    ui.setupUi(GUI_LSTM_FORCASTER)
    GUI_LSTM_FORCASTER.show()
    sys.exit(app.exec_())